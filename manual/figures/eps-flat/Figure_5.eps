%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Figure_5.pdf
%%Creator: (Adobe Acrobat 11.0.7)
%%For: dhimmels
%%CreationDate: 12/20/14, 7:04 PM
%%BoundingBox: 0 0 491 288
%%HiResBoundingBox: 0 0 491 288
%%CropBox: 0 0 491 288
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 903 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.10"
   xmp:ModifyDate="2014-10-27T11:10:35-07:00"
   xmp:CreateDate="2014-10-27T11:10:35-07:00"
   xmp:CreatorTool="Atsuhito KOHDA,,,"
   xmpMM:DocumentID="uuid:18b172ce-9621-11ef-0000-bd6ca380248b"
   xmpMM:InstanceID="uuid:18b172ce-9621-11ef-0000-bd6ca380248b"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Symbol</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -288 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 288 li
491 288 li
491 0 li
cp
clp
0 288 mo
491 288 li
491 0 li
0 0 li
0 288 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
0 288 mo
316.773 288 li
316.773 0 li
0 0 li
0 288 li
f
gsave
0 288 mo
317.773 288 li
317.773 0 li
0 0 li
0 288 li
clp
1.06299 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
0 288 mo
316.773 288 li
316.773 -6.10352e-05 li
0 -6.10352e-05 li
cp
/1 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
@
grestore
43.277 253.723 mo
314.781 253.723 li
314.781 1.99599 li
43.277 1.99599 li
43.277 253.723 li
f
gsave
43.277 242 mo
315 242 li
315 240 li
43.277 240 li
43.277 242 li
clp
43.277 240.461 mo
314.781 240.461 li
314.781 241.524 li
43.277 241.524 li
43.277 240.461 li
.980392 .980392 .980392 rgb
f
grestore
gsave
43.277 178 mo
315 178 li
315 176 li
43.277 176 li
43.277 178 li
clp
43.277 176.179 mo
314.781 176.179 li
314.781 177.242 li
43.277 177.242 li
43.277 176.179 li
.980392 .980392 .980392 rgb
f
grestore
gsave
43.277 113 mo
315 113 li
315 111 li
43.277 111 li
43.277 113 li
clp
43.277 111.899 mo
314.781 111.899 li
314.781 112.961 li
43.277 112.961 li
43.277 111.899 li
.980392 .980392 .980392 rgb
f
grestore
gsave
43.277 49 mo
315 49 li
315 47 li
43.277 47 li
43.277 49 li
clp
43.277 47.6164 mo
314.781 47.6164 li
314.781 48.6795 li
43.277 48.6795 li
43.277 47.6164 li
.980392 .980392 .980392 rgb
f
grestore
gsave
100 254 mo
102 254 li
102 1.99205 li
100 1.99205 li
100 254 li
clp
100.198 253.723 mo
100.198 1.99193 li
101.261 1.99193 li
101.261 253.723 li
100.198 253.723 li
.980392 .980392 .980392 rgb
f
grestore
gsave
188 254 mo
190 254 li
190 1.99205 li
188 1.99205 li
188 254 li
clp
188.468 253.723 mo
188.468 1.99193 li
189.531 1.99193 li
189.531 253.723 li
188.468 253.723 li
.980392 .980392 .980392 rgb
f
grestore
gsave
276 254 mo
278 254 li
278 1.99205 li
276 1.99205 li
276 254 li
clp
276.738 253.723 mo
276.738 1.99193 li
277.801 1.99193 li
277.801 253.723 li
276.738 253.723 li
.980392 .980392 .980392 rgb
f
grestore
gsave
43.277 210 mo
315 210 li
315 208 li
43.277 208 li
43.277 210 li
clp
43.277 208.639 mo
314.781 208.639 li
314.781 209.065 li
43.277 209.065 li
43.277 208.639 li
.898039 .898039 .898039 rgb
f
grestore
gsave
43.277 145 mo
315 145 li
315 144 li
43.277 144 li
43.277 145 li
clp
43.277 144.357 mo
314.781 144.357 li
314.781 144.783 li
43.277 144.783 li
43.277 144.357 li
.898039 .898039 .898039 rgb
f
grestore
gsave
43.277 81 mo
315 81 li
315 79.9999 li
43.277 79.9999 li
43.277 81 li
clp
43.277 80.0764 mo
314.781 80.0764 li
314.781 80.5016 li
43.277 80.5016 li
43.277 80.0764 li
.898039 .898039 .898039 rgb
f
grestore
gsave
43.277 16.9999 mo
315 16.9999 li
315 15 li
43.277 15 li
43.277 16.9999 li
clp
43.277 15.7954 mo
314.781 15.7954 li
314.781 16.2205 li
43.277 16.2205 li
43.277 15.7954 li
.898039 .898039 .898039 rgb
f
grestore
gsave
56 254 mo
57 254 li
57 1.99205 li
56 1.99205 li
56 254 li
clp
56.3815 253.723 mo
56.3815 1.99193 li
56.8067 1.99193 li
56.8067 253.723 li
56.3815 253.723 li
.898039 .898039 .898039 rgb
f
grestore
gsave
144 254 mo
146 254 li
146 1.99205 li
144 1.99205 li
144 254 li
clp
144.65 253.723 mo
144.65 1.99193 li
145.076 1.99193 li
145.076 253.723 li
144.65 253.723 li
.898039 .898039 .898039 rgb
f
grestore
gsave
232 254 mo
234 254 li
234 1.99205 li
232 1.99205 li
232 254 li
clp
232.924 253.723 mo
232.924 1.99193 li
233.35 1.99193 li
233.35 253.723 li
232.924 253.723 li
.898039 .898039 .898039 rgb
f
grestore
55.6211 121.328 mo
58.7148 122.473 li
61.8121 123.609 li
64.9059 124.742 li
68.0039 125.871 li
71.098 126.992 li
74.1948 128.105 li
77.289 129.211 li
80.3871 130.309 li
83.48 131.402 li
86.5781 132.48 li
89.6762 133.555 li
92.7699 134.617 li
95.8672 135.668 li
98.9609 136.711 li
102.059 137.738 li
105.152 138.758 li
108.25 139.762 li
111.344 140.758 li
114.441 141.738 li
117.535 142.703 li
120.633 143.66 li
123.727 144.602 li
126.824 145.527 li
129.918 146.445 li
133.016 147.348 li
136.109 148.238 li
139.207 149.117 li
142.301 149.984 li
145.398 150.844 li
148.492 151.691 li
151.59 152.527 li
154.688 153.355 li
157.781 154.176 li
160.879 154.984 li
163.973 155.789 li
167.07 156.586 li
170.164 157.375 li
173.262 158.16 li
176.355 158.938 li
179.453 159.711 li
182.547 160.477 li
185.645 161.238 li
188.738 162 li
191.836 162.754 li
194.93 163.504 li
198.027 164.25 li
201.121 164.996 li
204.219 165.734 li
207.312 166.473 li
210.41 167.211 li
213.504 167.941 li
219.699 169.402 li
222.793 170.129 li
225.891 170.852 li
228.984 171.578 li
232.082 172.297 li
235.176 173.016 li
238.273 173.734 li
241.367 174.453 li
244.465 175.168 li
247.559 175.883 li
250.656 176.594 li
253.75 177.309 li
256.848 178.02 li
259.941 178.727 li
263.039 179.438 li
266.133 180.145 li
269.23 180.852 li
272.324 181.559 li
275.422 182.266 li
278.516 182.973 li
284.711 184.379 li
287.805 185.082 li
290.902 185.785 li
293.996 186.488 li
297.094 187.188 li
300.188 187.891 li
300.188 221.566 li
297.094 220.355 li
293.996 219.145 li
290.902 217.934 li
287.805 216.727 li
284.711 215.516 li
278.516 213.102 li
275.422 211.895 li
272.324 210.688 li
269.23 209.48 li
266.133 208.277 li
263.039 207.074 li
259.941 205.871 li
256.848 204.668 li
253.75 203.469 li
250.656 202.266 li
247.559 201.07 li
244.465 199.871 li
241.367 198.676 li
238.273 197.48 li
235.176 196.285 li
232.082 195.094 li
228.984 193.902 li
225.891 192.711 li
222.793 191.523 li
219.699 190.34 li
216.602 189.156 li
213.504 187.977 li
210.41 186.797 li
207.312 185.621 li
204.219 184.445 li
201.121 183.273 li
198.027 182.105 li
194.93 180.941 li
191.836 179.781 li
188.738 178.621 li
185.645 177.469 li
182.547 176.32 li
179.453 175.176 li
176.355 174.035 li
173.262 172.902 li
170.164 171.773 li
167.07 170.648 li
163.973 169.535 li
160.879 168.426 li
157.781 167.324 li
154.688 166.234 li
151.59 165.148 li
148.492 164.074 li
145.398 163.008 li
142.301 161.953 li
139.207 160.91 li
136.109 159.875 li
133.016 158.855 li
129.918 157.848 li
126.824 156.852 li
123.727 155.867 li
120.633 154.895 li
117.535 153.938 li
114.441 152.992 li
111.344 152.062 li
108.25 151.145 li
105.152 150.234 li
102.059 149.344 li
98.9609 148.461 li
95.8672 147.59 li
92.7699 146.73 li
89.6762 145.879 li
86.5781 145.039 li
83.48 144.207 li
80.3871 143.387 li
77.289 142.574 li
74.1948 141.77 li
71.098 140.969 li
68.0039 140.18 li
64.9059 139.395 li
61.8121 138.613 li
58.7148 137.84 li
55.6211 137.07 li
55.6211 121.328 li
1 .698039 .698039 rgb
f
58.223 96.23 mo
61.3121 97.266 li
64.4058 98.301 li
70.5859 100.355 li
73.6801 101.379 li
76.7699 102.395 li
79.8629 103.41 li
82.9531 104.418 li
86.043 105.422 li
89.1371 106.418 li
92.227 107.41 li
95.3199 108.398 li
98.4102 109.375 li
101.5 110.348 li
104.594 111.312 li
107.684 112.27 li
110.777 113.215 li
113.867 114.156 li
116.957 115.086 li
120.051 116.004 li
123.141 116.914 li
126.234 117.812 li
129.324 118.699 li
132.414 119.574 li
135.508 120.441 li
138.598 121.293 li
141.688 122.137 li
144.781 122.965 li
147.871 123.785 li
150.965 124.594 li
154.055 125.391 li
157.145 126.176 li
160.238 126.953 li
163.328 127.719 li
166.422 128.477 li
169.512 129.223 li
172.602 129.965 li
175.695 130.695 li
178.785 131.418 li
181.879 132.137 li
184.969 132.844 li
188.059 133.547 li
191.152 134.246 li
194.242 134.938 li
197.336 135.625 li
200.426 136.305 li
203.516 136.98 li
206.609 137.656 li
209.699 138.324 li
212.789 138.988 li
215.883 139.652 li
218.973 140.312 li
222.066 140.969 li
225.156 141.621 li
228.246 142.27 li
231.34 142.918 li
234.43 143.566 li
237.523 144.207 li
240.613 144.852 li
243.703 145.492 li
246.797 146.129 li
249.887 146.766 li
252.98 147.398 li
256.07 148.035 li
259.16 148.664 li
262.254 149.297 li
265.344 149.926 li
268.438 150.555 li
271.527 151.184 li
274.617 151.809 li
277.711 152.434 li
283.891 153.684 li
286.984 154.305 li
290.074 154.926 li
293.168 155.551 li
296.258 156.168 li
299.348 156.789 li
302.441 157.41 li
302.441 185.574 li
299.348 184.5 li
293.168 182.352 li
290.074 181.277 li
286.984 180.203 li
283.891 179.133 li
277.711 176.992 li
274.617 175.922 li
271.527 174.852 li
268.438 173.785 li
265.344 172.719 li
262.254 171.652 li
259.16 170.59 li
252.98 168.465 li
249.887 167.406 li
246.797 166.348 li
243.703 165.289 li
237.523 163.18 li
234.43 162.129 li
231.34 161.082 li
228.246 160.035 li
225.156 158.988 li
222.066 157.949 li
218.973 156.91 li
215.883 155.871 li
212.789 154.84 li
209.699 153.809 li
206.609 152.785 li
203.516 151.762 li
197.336 149.73 li
194.242 148.723 li
191.152 147.719 li
188.059 146.723 li
184.969 145.73 li
181.879 144.746 li
178.785 143.766 li
175.695 142.793 li
172.602 141.832 li
169.512 140.875 li
166.422 139.93 li
163.328 138.988 li
160.238 138.062 li
157.145 137.141 li
154.055 136.234 li
150.965 135.336 li
147.871 134.449 li
144.781 133.574 li
141.688 132.711 li
138.598 131.855 li
135.508 131.016 li
132.414 130.184 li
129.324 129.367 li
126.234 128.559 li
123.141 127.762 li
120.051 126.977 li
116.957 126.199 li
113.867 125.434 li
110.777 124.68 li
107.684 123.93 li
104.594 123.191 li
101.5 122.461 li
98.4102 121.738 li
95.3199 121.023 li
92.227 120.312 li
89.1371 119.609 li
86.043 118.914 li
82.9531 118.223 li
79.8629 117.535 li
76.7699 116.852 li
73.6801 116.176 li
70.5859 115.504 li
64.4058 114.168 li
61.3121 113.508 li
58.223 112.848 li
58.223 96.23 li
f
60.3789 75.758 mo
65.9101 77.391 li
68.6801 78.199 li
71.4449 79 li
74.2148 79.797 li
76.9801 80.586 li
79.75 81.367 li
82.5159 82.137 li
85.2852 82.898 li
88.0512 83.6521 li
90.816 84.395 li
93.5859 85.125 li
96.352 85.84 li
99.1211 86.5469 li
101.887 87.234 li
104.656 87.91 li
107.422 88.57 li
110.191 89.215 li
112.957 89.84 li
115.723 90.449 li
118.492 91.039 li
121.258 91.613 li
124.027 92.172 li
126.793 92.7071 li
129.562 93.23 li
132.328 93.734 li
135.098 94.223 li
137.863 94.695 li
140.629 95.1521 li
143.398 95.598 li
146.164 96.0271 li
148.934 96.4451 li
151.699 96.852 li
154.469 97.246 li
157.234 97.633 li
160.004 98.008 li
162.77 98.375 li
165.535 98.734 li
168.305 99.09 li
171.07 99.4341 li
173.84 99.7731 li
176.605 100.109 li
179.375 100.438 li
182.141 100.762 li
184.91 101.082 li
190.441 101.707 li
193.211 102.016 li
195.977 102.32 li
198.746 102.621 li
201.512 102.922 li
204.281 103.219 li
207.047 103.512 li
209.816 103.805 li
215.348 104.383 li
218.117 104.668 li
220.883 104.949 li
223.652 105.234 li
226.418 105.516 li
229.188 105.793 li
231.953 106.074 li
234.723 106.348 li
237.488 106.625 li
240.254 106.898 li
243.023 107.176 li
245.789 107.445 li
248.559 107.719 li
251.324 107.988 li
254.094 108.262 li
256.859 108.527 li
259.629 108.797 li
262.395 109.066 li
265.16 109.332 li
267.93 109.598 li
270.695 109.867 li
273.465 110.133 li
276.23 110.395 li
279 110.66 li
279 149.988 li
276.23 149.102 li
273.465 148.219 li
270.695 147.336 li
267.93 146.453 li
265.16 145.57 li
262.395 144.688 li
259.629 143.809 li
256.859 142.926 li
254.094 142.047 li
251.324 141.168 li
248.559 140.289 li
245.789 139.414 li
243.023 138.539 li
240.254 137.664 li
234.723 135.914 li
231.953 135.043 li
229.188 134.172 li
226.418 133.305 li
223.652 132.438 li
220.883 131.57 li
218.117 130.707 li
215.348 129.844 li
212.582 128.98 li
209.816 128.121 li
207.047 127.266 li
204.281 126.41 li
201.512 125.559 li
198.746 124.707 li
195.977 123.859 li
193.211 123.016 li
190.441 122.176 li
184.91 120.504 li
182.141 119.676 li
179.375 118.852 li
176.605 118.031 li
173.84 117.219 li
171.07 116.406 li
168.305 115.605 li
165.535 114.809 li
162.77 114.02 li
160.004 113.238 li
157.234 112.465 li
154.469 111.703 li
151.699 110.949 li
148.934 110.207 li
146.164 109.477 li
143.398 108.758 li
140.629 108.055 li
137.863 107.363 li
135.098 106.684 li
132.328 106.023 li
129.562 105.379 li
126.793 104.754 li
124.027 104.141 li
121.258 103.551 li
118.492 102.973 li
115.723 102.418 li
112.957 101.879 li
110.191 101.355 li
107.422 100.848 li
104.656 100.359 li
101.887 99.887 li
99.1211 99.4261 li
96.352 98.9839 li
93.5859 98.5511 li
90.816 98.1329 li
88.0512 97.727 li
85.2852 97.3279 li
82.5159 96.9409 li
79.75 96.566 li
76.9801 96.195 li
74.2148 95.836 li
71.4449 95.484 li
68.6801 95.137 li
65.9101 94.7971 li
63.1448 94.461 li
60.3789 94.1329 li
60.3789 75.758 li
f
55.7782 128.691 mo
56.7936 129.005 li
56.4795 130.021 li
55.4641 129.707 li
55.7782 128.691 li
59.8402 129.947 mo
60.8557 130.261 li
60.542 131.277 li
59.5263 130.963 li
59.8402 129.947 li
63.9026 131.203 mo
64.9181 131.517 li
64.604 132.533 li
63.5884 132.219 li
63.9026 131.203 li
67.9653 132.455 mo
68.1602 132.515 li
68.161 132.515 li
68.9817 132.769 li
68.6676 133.785 li
67.8468 133.531 li
67.8477 133.531 li
67.6528 133.471 li
67.9653 132.455 li
72.0283 133.711 mo
73.0438 134.026 li
72.7297 135.041 li
71.7141 134.727 li
72.0283 133.711 li
76.0903 134.968 mo
77.1058 135.282 li
76.7918 136.298 li
75.7763 135.983 li
76.0903 134.968 li
80.1529 136.22 mo
80.5433 136.34 li
80.5442 136.34 li
81.1694 136.534 li
80.8553 137.549 li
80.2299 137.356 li
80.2308 137.356 li
79.8404 137.236 li
80.1529 136.22 li
84.2158 137.476 mo
85.2314 137.79 li
84.9176 138.805 li
83.9021 138.492 li
84.2158 137.476 li
88.2782 138.729 mo
89.2943 139.041 li
88.9817 140.057 li
87.9658 139.745 li
88.2782 138.729 li
92.342 139.983 mo
92.9269 140.164 li
93.3574 140.297 li
93.0435 141.313 li
92.613 141.18 li
92.0278 140.999 li
92.342 139.983 li
96.4043 141.239 mo
97.4197 141.553 li
97.1057 142.568 li
96.0902 142.254 li
96.4043 141.239 li
100.466 142.493 mo
101.482 142.806 li
101.17 143.822 li
100.154 143.509 li
100.466 142.493 li
104.53 143.747 mo
105.309 143.988 li
105.545 144.061 li
105.231 145.077 li
104.995 145.004 li
104.216 144.763 li
104.53 143.747 li
104.53 143.747 li
108.592 145.003 mo
109.608 145.317 li
109.294 146.332 li
108.278 146.018 li
108.592 145.003 li
112.654 146.257 mo
113.67 146.57 li
113.358 147.586 li
112.341 147.273 li
112.654 146.257 li
116.718 147.511 mo
117.692 147.812 li
117.733 147.825 li
117.42 148.841 li
117.378 148.828 li
116.404 148.526 li
116.718 147.511 li
120.78 148.766 mo
120.79 148.769 li
121.796 149.08 li
121.482 150.096 li
120.476 149.785 li
120.466 149.782 li
120.78 148.766 li
124.842 150.021 mo
125.858 150.334 li
125.545 151.35 li
124.529 151.037 li
124.842 150.021 li
128.906 151.276 mo
129.921 151.59 li
129.607 152.605 li
128.591 152.291 li
128.906 151.276 li
132.968 152.531 mo
133.173 152.594 li
133.984 152.845 li
133.669 153.861 li
132.859 153.61 li
132.654 153.547 li
132.968 152.531 li
137.03 153.786 mo
138.046 154.099 li
137.733 155.115 li
136.717 154.802 li
137.03 153.786 li
141.094 155.039 mo
142.109 155.353 li
141.795 156.369 li
140.78 156.055 li
141.094 155.039 li
145.156 156.295 mo
145.555 156.418 li
146.171 156.609 li
145.857 157.624 li
145.241 157.434 li
144.842 157.311 li
145.156 156.295 li
149.218 157.55 mo
150.234 157.863 li
149.921 158.879 li
148.905 158.566 li
149.218 157.55 li
153.282 158.802 mo
154.297 159.116 li
153.984 160.132 li
152.968 159.818 li
153.282 158.802 li
157.344 160.058 mo
157.938 160.242 li
158.359 160.372 li
158.046 161.388 li
157.624 161.258 li
157.03 161.074 li
157.344 160.058 li
161.406 161.313 mo
162.422 161.626 li
162.109 162.642 li
161.093 162.329 li
161.406 161.313 li
165.47 162.566 mo
166.485 162.88 li
166.171 163.896 li
165.156 163.582 li
165.47 162.566 li
169.532 163.822 mo
170.321 164.066 li
170.547 164.136 li
170.234 165.152 li
170.007 165.082 li
169.218 164.838 li
169.532 163.822 li
173.594 165.077 mo
174.61 165.39 li
174.297 166.406 li
173.281 166.093 li
173.594 165.077 li
177.658 166.33 mo
178.673 166.644 li
178.359 167.66 li
177.344 167.346 li
177.658 166.33 li
181.72 167.586 mo
182.704 167.89 li
182.735 167.9 li
182.422 168.916 li
182.39 168.906 li
181.406 168.601 li
181.72 167.586 li
185.782 168.841 mo
185.802 168.847 li
186.798 169.154 li
186.485 170.17 li
185.488 169.863 li
185.468 169.857 li
185.782 168.841 li
189.845 170.095 mo
190.861 170.409 li
190.547 171.424 li
189.531 171.11 li
189.845 170.095 li
193.908 171.35 mo
194.923 171.665 li
194.609 172.68 li
193.594 172.366 li
193.908 171.35 li
197.97 172.606 mo
198.184 172.672 li
198.985 172.919 li
198.672 173.935 li
197.871 173.688 li
197.656 173.622 li
197.97 172.606 li
202.033 173.859 mo
203.049 174.172 li
202.735 175.188 li
201.72 174.874 li
202.033 173.859 li
206.096 175.114 mo
207.111 175.428 li
206.797 176.444 li
205.782 176.13 li
206.096 175.114 li
210.158 176.37 mo
210.567 176.496 li
211.173 176.683 li
210.86 177.699 li
210.254 177.512 li
209.844 177.385 li
210.158 176.37 li
214.221 177.622 mo
215.237 177.936 li
214.923 178.952 li
213.908 178.638 li
214.221 177.622 li
218.284 178.877 mo
219.299 179.191 li
218.986 180.207 li
217.97 179.893 li
218.284 178.877 li
222.346 180.133 mo
222.95 180.32 li
223.361 180.447 li
223.049 181.463 li
222.637 181.336 li
222.032 181.149 li
222.346 180.133 li
226.41 181.385 mo
227.425 181.699 li
227.111 182.715 li
226.096 182.401 li
226.41 181.385 li
230.472 182.641 mo
231.487 182.955 li
231.174 183.971 li
230.158 183.657 li
230.472 182.641 li
234.534 183.897 mo
235.333 184.144 li
235.549 184.211 li
235.236 185.227 li
235.02 185.16 li
234.22 184.913 li
234.534 183.897 li
238.598 185.149 mo
239.613 185.463 li
239.299 186.479 li
238.284 186.165 li
238.598 185.149 li
242.66 186.405 mo
243.675 186.72 li
243.361 187.735 li
242.346 187.421 li
242.66 186.405 li
246.722 187.662 mo
247.716 187.969 li
247.737 187.976 li
247.424 188.992 li
247.403 188.985 li
246.408 188.677 li
246.722 187.662 li
250.785 188.914 mo
250.812 188.922 li
251.801 189.228 li
251.487 190.243 li
250.499 189.938 li
250.472 189.93 li
250.785 188.914 li
254.847 190.17 mo
255.863 190.484 li
255.549 191.499 li
254.534 191.186 li
254.847 190.17 li
258.91 191.426 mo
259.925 191.74 li
259.611 192.755 li
258.596 192.441 li
258.91 191.426 li
262.973 192.677 mo
263.195 192.746 li
263.989 192.991 li
263.675 194.007 li
262.882 193.762 li
262.66 193.693 li
262.973 192.677 li
267.035 193.933 mo
268.051 194.247 li
267.737 195.263 li
266.722 194.949 li
267.035 193.933 li
271.098 195.189 mo
272.113 195.504 li
271.799 196.519 li
270.784 196.205 li
271.098 195.189 li
275.16 196.442 mo
275.578 196.57 li
276.177 196.755 li
275.863 197.771 li
275.265 197.586 li
274.848 197.458 li
275.16 196.442 li
279.223 197.697 mo
280.239 198.011 li
279.925 199.027 li
278.91 198.713 li
279.223 197.697 li
283.286 198.952 mo
284.302 199.266 li
283.988 200.282 li
282.972 199.968 li
283.286 198.952 li
287.349 200.205 mo
287.961 200.394 li
288.365 200.519 li
288.051 201.534 li
287.648 201.41 li
287.036 201.221 li
287.349 200.205 li
291.412 201.46 mo
292.427 201.774 li
292.113 202.79 li
291.098 202.476 li
291.412 201.46 li
295.474 202.716 mo
296.49 203.03 li
296.176 204.046 li
295.16 203.732 li
295.474 202.716 li
299.536 203.97 mo
300.345 204.219 li
300.031 205.235 li
299.223 204.986 li
299.536 203.97 li
.6 0 0 rgb
f
58.3637 104.027 mo
61.4528 104.874 li
61.4524 104.874 li
62.4638 105.151 li
62.1831 106.177 li
61.1717 105.9 li
61.1714 105.9 li
58.0823 105.052 li
58.3637 104.026 li
58.3637 104.027 li
66.5649 106.275 mo
70.6651 107.401 li
70.3839 108.426 li
66.2835 107.301 li
66.5649 106.275 li
74.7662 108.524 mo
76.9105 109.112 li
78.8665 109.649 li
78.5854 110.674 li
76.6294 110.138 li
74.4847 109.549 li
74.7662 108.524 li
74.7662 108.524 li
82.967 110.773 mo
86.1836 111.655 li
87.0676 111.898 li
86.7866 112.923 li
85.9025 112.681 li
82.6859 111.798 li
82.967 110.773 li
91.1683 113.022 mo
92.3676 113.35 li
95.269 114.146 li
94.9879 115.171 li
92.0865 114.376 li
90.8873 114.047 li
91.1683 113.022 li
99.3696 115.271 mo
101.641 115.893 li
103.47 116.395 li
103.189 117.42 li
101.36 116.919 li
99.0884 116.296 li
99.3696 115.271 li
107.571 117.52 mo
107.825 117.589 li
107.824 117.589 li
110.917 118.432 li
110.918 118.432 li
111.673 118.64 li
111.391 119.665 li
110.636 119.458 li
110.637 119.458 li
107.544 118.615 li
107.543 118.615 li
107.289 118.545 li
107.571 117.52 li
115.773 119.765 mo
117.098 120.128 li
119.873 120.888 li
119.593 121.914 li
116.817 121.154 li
115.492 120.79 li
115.773 119.765 li
123.974 122.013 mo
126.375 122.671 li
128.075 123.138 li
127.794 124.163 li
126.093 123.697 li
123.693 123.038 li
123.974 122.013 li
123.974 122.013 li
132.175 124.262 mo
132.555 124.366 li
135.648 125.214 li
136.276 125.386 li
135.995 126.412 li
135.367 126.24 li
132.273 125.392 li
131.894 125.288 li
132.175 124.262 li
140.377 126.511 mo
141.829 126.909 li
144.477 127.636 li
144.196 128.661 li
141.547 127.935 li
140.095 127.536 li
140.377 126.511 li
140.377 126.511 li
148.578 128.76 mo
151.105 129.452 li
152.679 129.884 li
152.397 130.909 li
150.824 130.478 li
148.297 129.785 li
148.578 128.76 li
156.779 131.008 mo
157.286 131.147 li
160.379 131.995 li
160.88 132.133 li
160.599 133.158 li
160.097 133.021 li
157.004 132.173 li
156.498 132.034 li
156.779 131.008 li
164.98 133.257 mo
166.563 133.69 li
169.081 134.381 li
168.8 135.406 li
166.281 134.716 li
164.699 134.282 li
164.98 133.257 li
173.181 135.506 mo
175.836 136.233 li
177.282 136.63 li
177.001 137.656 li
175.554 137.259 li
172.9 136.531 li
173.182 135.506 li
173.181 135.506 li
181.383 137.754 mo
182.019 137.928 li
185.484 138.879 li
185.202 139.904 li
181.738 138.954 li
181.102 138.779 li
181.383 137.754 li
181.383 137.754 li
189.584 140.002 mo
191.292 140.467 li
191.293 140.467 li
193.686 141.124 li
193.404 142.149 li
191.011 141.493 li
191.012 141.493 li
189.304 141.027 li
189.584 140.002 li
189.584 140.002 li
197.786 142.248 mo
201.887 143.373 li
201.606 144.398 li
197.505 143.273 li
197.786 142.248 li
205.987 144.497 mo
206.75 144.706 li
210.088 145.622 li
209.807 146.647 li
206.468 145.732 li
205.706 145.523 li
205.987 144.497 li
205.987 144.497 li
214.188 146.746 mo
216.023 147.249 li
218.289 147.871 li
218.008 148.896 li
215.742 148.275 li
213.908 147.772 li
214.188 146.746 li
222.39 148.995 mo
226.49 150.119 li
226.209 151.145 li
222.109 150.02 li
222.39 148.995 li
230.591 151.244 mo
231.48 151.487 li
234.571 152.335 li
234.691 152.368 li
234.411 153.394 li
234.29 153.361 li
231.199 152.513 li
230.31 152.269 li
230.591 151.244 li
238.792 153.492 mo
242.893 154.618 li
242.611 155.643 li
238.511 154.517 li
238.792 153.492 li
246.994 155.741 mo
250.028 156.573 li
251.094 156.866 li
250.813 157.891 li
249.746 157.599 li
246.712 156.766 li
246.994 155.741 li
255.195 157.99 mo
259.295 159.115 li
259.014 160.14 li
254.913 159.016 li
255.195 157.99 li
263.396 160.239 mo
265.484 160.811 li
267.497 161.363 li
267.216 162.388 li
265.204 161.837 li
263.115 161.264 li
263.396 160.239 li
271.598 162.484 mo
271.667 162.503 li
274.757 163.35 li
275.699 163.608 li
275.418 164.634 li
274.476 164.376 li
271.386 163.529 li
271.317 163.51 li
271.598 162.484 li
279.799 164.733 mo
283.9 165.857 li
283.619 166.882 li
279.518 165.758 li
279.799 164.733 li
288.001 166.982 mo
290.215 167.589 li
292.101 168.106 li
291.82 169.131 li
289.934 168.615 li
287.719 168.007 li
288.001 166.982 li
296.202 169.23 mo
299.489 170.132 li
300.302 170.355 li
300.021 171.38 li
299.208 171.158 li
295.921 170.256 li
296.202 169.23 li
f
60.487 84.4246 mo
66.0183 85.5736 li
68.7879 86.1476 li
71.5529 86.7217 li
74.3227 87.2956 li
74.323 87.2957 li
77.0883 87.8707 li
77.088 87.8706 li
79.8578 88.4446 li
82.624 89.0186 li
85.3931 89.5925 li
90.9241 90.7416 li
93.6938 91.3156 li
96.4599 91.8896 li
96.4606 91.8898 li
99.2297 92.4677 li
99.2291 92.4676 li
101.995 93.0416 li
104.764 93.6166 li
107.53 94.1905 li
110.299 94.7646 li
115.831 95.9136 li
118.6 96.4876 li
121.366 97.0615 li
124.135 97.6356 li
126.901 98.2096 li
129.67 98.7846 li
132.436 99.3586 li
135.206 99.9325 li
140.737 101.082 li
143.506 101.656 li
146.272 102.23 li
149.042 102.804 li
151.807 103.378 li
151.808 103.378 li
154.578 103.957 li
154.577 103.957 li
157.342 104.531 li
160.112 105.105 li
165.643 106.253 li
168.413 106.828 li
171.178 107.402 li
173.948 107.976 li
176.713 108.55 li
179.483 109.125 li
182.249 109.699 li
185.018 110.273 li
190.549 111.421 li
193.319 111.996 li
196.085 112.57 li
198.854 113.144 li
201.62 113.718 li
204.389 114.292 li
207.155 114.867 li
209.925 115.445 li
215.456 116.593 li
218.225 117.168 li
220.991 117.742 li
223.76 118.316 li
226.526 118.89 li
229.296 119.464 li
232.061 120.039 li
234.831 120.613 li
240.362 121.761 li
243.131 122.335 li
245.897 122.91 li
248.667 123.484 li
251.432 124.058 li
254.202 124.632 li
256.967 125.207 li
259.737 125.781 li
262.503 126.355 li
265.269 126.933 li
268.038 127.507 li
270.803 128.082 li
273.573 128.656 li
276.338 129.23 li
279.108 129.804 li
278.892 130.844 li
276.122 130.27 li
273.357 129.696 li
270.587 129.122 li
267.822 128.547 li
265.052 127.973 li
262.286 127.395 li
259.521 126.821 li
256.751 126.247 li
253.986 125.672 li
251.216 125.098 li
248.451 124.524 li
245.681 123.951 li
242.915 123.375 li
240.146 122.801 li
234.615 121.653 li
231.845 121.079 li
229.08 120.504 li
226.31 119.93 li
223.544 119.356 li
220.775 118.782 li
218.009 118.208 li
215.24 117.633 li
209.708 116.485 li
206.938 115.907 li
204.173 115.332 li
201.404 114.758 li
198.638 114.184 li
195.869 113.61 li
193.103 113.036 li
190.333 112.461 li
184.802 111.313 li
182.033 110.739 li
179.267 110.165 li
176.497 109.59 li
173.732 109.016 li
170.962 108.442 li
168.197 107.868 li
165.427 107.293 li
159.896 106.145 li
157.126 105.571 li
154.361 104.997 li
154.36 104.997 li
151.59 104.418 li
151.591 104.418 li
148.826 103.844 li
146.056 103.27 li
143.29 102.696 li
140.521 102.122 li
134.99 100.973 li
132.22 100.4 li
129.454 99.8255 li
126.685 99.2505 li
123.919 98.6764 li
121.15 98.1024 li
118.384 97.5284 li
115.615 96.9545 li
110.083 95.8054 li
107.314 95.2314 li
104.548 94.6574 li
101.779 94.0824 li
99.0131 93.5085 li
99.0125 93.5084 li
96.2434 92.9303 li
96.244 92.9304 li
93.478 92.3564 li
90.7081 91.7825 li
85.1771 90.6334 li
82.4082 90.0594 li
79.642 89.4855 li
76.8723 88.9115 li
76.8719 88.9113 li
74.1066 88.3363 li
74.107 88.3364 li
71.337 87.7624 li
68.5721 87.1884 li
65.8023 86.6145 li
60.2708 85.4654 li
60.487 84.4246 li
f
177.51 145.924 mo
177.395 145.924 177.281 145.916 177.168 145.899 cv
177.168 145.885 177.168 145.87 177.168 145.855 cv
177.168 145.435 177.075 145.078 176.916 144.783 cv
179.429 144.783 li
179.068 145.544 178.289 145.924 177.51 145.924 cv
179.576 144.357 mo
176.605 144.357 li
176.514 144.263 176.415 144.18 176.308 144.107 cv
176.699 143.43 li
175.408 143.43 li
175.443 143.183 175.514 142.962 175.613 142.768 cv
175.695 142.793 li
178.785 143.766 li
179.627 144.033 li
179.617 144.146 179.6 144.254 179.576 144.357 cv
.231373 .231373 .231373 rgb
f
179.429 144.783 mo
176.916 144.783 li
176.83 144.623 176.725 144.481 176.605 144.357 cv
179.576 144.357 li
179.541 144.51 179.491 144.652 179.429 144.783 cv
.207843 .207843 .207843 rgb
f
179.627 144.033 mo
178.785 143.766 li
175.695 142.793 li
175.613 142.768 li
175.983 142.038 176.747 141.673 177.51 141.673 cv
177.573 141.673 177.635 141.675 177.697 141.68 cv
177.152 142.625 li
179.327 142.625 li
179.521 142.938 179.637 143.329 179.637 143.797 cv
179.637 143.878 179.634 143.956 179.627 144.033 cv
.231373 .160784 .160784 rgb
f
174.473 139.281 mo
174.393 139.281 li
174.433 139.211 li
174.473 139.281 li
173.373 139.281 mo
172.837 139.281 li
172.918 139.084 172.971 138.863 172.991 138.619 cv
173.373 139.281 li
171.729 136.432 mo
171.459 136.325 171.167 136.271 170.875 136.271 cv
170.737 136.271 170.598 136.283 170.462 136.307 cv
171.06 135.272 li
171.729 136.432 li
172.119 135.203 mo
171.099 135.203 li
171.609 134.32 li
172.119 135.203 li
.443137 .309804 .309804 rgb
f
146.207 136.047 mo
145.076 134.088 li
145.076 133.657 li
147.234 134.269 li
146.207 136.047 li
.537255 .537255 .537255 rgb
f
145.076 134.088 mo
144.778 133.573 li
144.781 133.574 li
145.076 133.657 li
145.076 134.088 li
.482353 .482353 .482353 rgb
f
147.234 134.269 mo
145.076 133.657 li
144.781 133.574 li
144.778 133.573 li
143.344 131.09 li
149.07 131.09 li
147.234 134.269 li
.537255 .376471 .376471 rgb
f
80.9468 119.439 mo
80.7192 119.439 80.4916 119.406 80.2744 119.342 cv
80.807 118.419 li
81.3359 119.336 li
82.0892 118.031 li
82.904 118.212 li
82.5622 119.03 81.7545 119.439 80.9468 119.439 cv
.639216 .639216 .639216 rgb
f
82.904 118.212 mo
82.0892 118.031 li
82.317 117.636 li
82.4865 117.851 82.6963 118.021 82.9299 118.147 cv
82.9216 118.169 82.9129 118.191 82.904 118.212 cv
.639216 .447059 .447059 rgb
f
80.6999 118.234 mo
78.999 118.234 li
78.885 117.97 78.8199 117.663 78.8199 117.312 cv
78.8199 117.31 78.8199 117.307 78.8199 117.305 cv
79.8629 117.535 li
80.3605 117.646 li
80.6999 118.234 li
.639216 .639216 .639216 rgb
f
80.3605 117.646 mo
79.8629 117.535 li
78.8199 117.305 li
78.8215 116.693 79.0218 116.214 79.3345 115.868 cv
80.3605 117.646 li
.639216 .447059 .447059 rgb
f
90.5469 132.449 mo
93.4102 127.488 li
87.684 127.488 li
cp
0 0 0 rgb
f
110.477 60.0861 mo
104.75 60.0861 li
107.613 55.1249 li
110.477 60.0861 li
.152941 .152941 .152941 rgb
f
127.766 146.629 mo
127.766 149.461 123.512 149.461 123.512 146.629 cv
123.512 143.793 127.766 143.793 127.766 146.629 cv
0 0 0 rgb
f
109.492 134.137 mo
103.766 134.137 li
106.629 129.18 li
109.492 134.137 li
.109804 .109804 .109804 rgb
f
164.082 186.188 mo
161.219 181.23 li
166.945 181.23 li
164.082 186.188 li
.509804 .509804 .509804 rgb
f
183.872 139.539 mo
181.098 139.539 li
180.079 137.772 li
181.922 134.578 li
184.201 138.527 li
182.019 137.928 li
181.383 137.754 li
181.383 137.754 li
181.383 137.754 li
181.383 137.754 li
181.102 138.779 li
181.738 138.954 li
183.872 139.539 li
.129412 .0901961 .0901961 rgb
f
184.785 139.539 mo
183.872 139.539 li
181.738 138.954 li
181.102 138.779 li
181.383 137.754 li
182.019 137.928 li
184.201 138.527 li
184.785 139.539 li
181.383 137.754 mo
181.383 137.754 li
181.383 137.754 li
181.383 137.754 li
.0784314 0 0 rgb
f
63.4323 135.719 mo
60.3801 135.719 li
59.4672 134.137 li
64.3456 134.137 li
63.4323 135.719 li
64.4247 134 mo
64.0794 133.402 li
64.4891 133.402 li
64.5539 133.451 64.6217 133.497 64.6917 133.538 cv
64.4247 134 li
59.1223 133.539 mo
59.043 133.402 li
59.2017 133.402 li
59.1223 133.539 li
.145098 .101961 .101961 rgb
f
61.2539 141.961 mo
64.1172 137.004 li
58.391 137.004 li
cp
0 0 0 rgb
f
103.578 116.91 mo
103.329 116.91 li
103.409 116.618 li
103.578 116.91 li
101.328 116.91 mo
97.852 116.91 li
100.715 111.953 li
103.245 116.333 li
101.641 115.893 li
99.3696 115.271 li
99.0884 116.296 li
101.328 116.91 li
.52549 .368627 .368627 rgb
f
103.329 116.91 mo
101.328 116.91 li
99.0884 116.296 li
99.3696 115.271 li
101.641 115.893 li
103.245 116.333 li
103.409 116.618 li
103.329 116.91 li
.313725 0 0 rgb
f
74.1602 95.2713 mo
73.8213 95.2713 73.4824 95.1992 73.178 95.055 cv
75.1424 95.055 li
74.838 95.1992 74.4991 95.2713 74.1602 95.2713 cv
76.1026 94.0752 mo
74.3424 91.025 li
75.3408 91.1015 76.2852 91.8082 76.2852 93.145 cv
76.2852 93.4994 76.2188 93.8094 76.1026 94.0752 cv
72.0352 93.1597 mo
72.0352 93.1548 72.0352 93.1498 72.0352 93.145 cv
72.0352 92.2009 72.5061 91.5712 73.1344 91.2557 cv
72.0352 93.1597 li
.0705882 .0509804 .0509804 rgb
f
109.293 117.168 mo
103.566 117.168 li
106.43 112.207 li
109.293 117.168 li
.498039 .34902 .34902 rgb
f
61.7191 97.4022 mo
61.6439 97.377 li
61.3425 96.8551 li
61.9526 96.8551 li
61.8523 97.0168 61.7727 97.1992 61.7191 97.4022 cv
64.6469 95.4657 mo
64.1366 94.5815 li
65.0902 94.6974 li
64.6469 95.4657 li
60.5327 95.4522 mo
59.7301 94.062 li
60.3789 94.062 li
60.3789 94.1329 li
61.2355 94.2346 li
60.5327 95.4522 li
.647059 .647059 .647059 rgb
f
61.701 97.4759 mo
61.6439 97.377 li
61.7191 97.4022 li
61.7127 97.4264 61.7066 97.451 61.701 97.4759 cv
.647059 .45098 .45098 rgb
f
65.0902 94.6974 mo
64.1366 94.5815 li
63.8367 94.062 li
65.4569 94.062 li
65.0902 94.6974 li
61.2355 94.2346 mo
60.3789 94.1329 li
60.3789 94.062 li
61.3352 94.062 li
61.2355 94.2346 li
f
63.0551 140.676 mo
65.918 135.719 li
60.191 135.719 li
63.0551 140.676 li
0 0 0 rgb
f
65.5121 63.172 mo
59.7852 63.172 li
62.648 58.211 li
65.5121 63.172 li
.576471 .576471 .576471 rgb
f
132.504 111.726 mo
131.441 111.726 130.379 111.018 130.379 109.602 cv
130.379 108.184 131.441 107.475 132.504 107.475 cv
133.566 107.475 134.629 108.184 134.629 109.602 cv
134.629 111.018 133.566 111.726 132.504 111.726 cv
.145098 .145098 .145098 rgb
f
66.8789 135.02 mo
69.7421 130.059 li
64.016 130.059 li
66.8789 135.02 li
0 0 0 rgb
f
63.168 72.793 mo
61.6202 70.113 li
64.7158 70.113 li
63.168 72.793 li
60.9914 69.0244 mo
60.3051 67.836 li
61.3687 67.836 li
60.945 68.57 li
61.2538 68.57 li
60.9914 69.0244 li
65.4031 68.923 mo
65.1994 68.57 li
65.6069 68.57 li
65.4031 68.923 li
.584314 .584314 .584314 rgb
f
68.1011 111.77 mo
65.148 111.77 li
65.7438 110.738 li
66.0898 110.738 li
65.9167 110.438 li
67.5307 107.643 li
68.6743 107.957 li
69.8558 110.004 li
67.0819 110.004 li
68.1011 111.77 li
.211765 .14902 .14902 rgb
f
68.6743 107.957 mo
67.5307 107.643 li
68.0121 106.809 li
68.6743 107.957 li
.12549 0 0 rgb
f
55.6211 151.734 mo
52.7578 146.773 li
56.3815 146.773 li
56.3815 150.416 li
55.6211 151.734 li
56.8067 149.68 mo
56.8067 146.773 li
58.484 146.773 li
56.8067 149.68 li
.180392 .180392 .180392 rgb
f
56.3815 150.416 mo
56.3815 146.773 li
56.8067 146.773 li
56.8067 149.68 li
56.3815 150.416 li
.160784 .160784 .160784 rgb
f
189.992 73.199 mo
189.531 73.199 li
189.531 72.4009 li
189.992 73.199 li
188.468 73.199 mo
184.266 73.199 li
187.129 68.238 li
188.468 70.5589 li
188.468 73.199 li
.654902 .654902 .654902 rgb
f
189.531 73.199 mo
188.468 73.199 li
188.468 70.5589 li
189.531 72.4009 li
189.531 73.199 li
.643137 .643137 .643137 rgb
f
81.3359 119.336 mo
84.1988 114.375 li
78.473 114.375 li
81.3359 119.336 li
0 0 0 rgb
f
62.7413 123.949 mo
62.5678 123.886 li
61.8281 122.605 li
63.0303 122.605 li
62.8497 122.912 62.7422 123.291 62.7422 123.742 cv
62.7422 123.808 62.7445 123.873 62.7491 123.936 cv
62.7413 123.949 li
.203922 .203922 .203922 rgb
f
64.691 127.562 mo
63.8859 126.168 li
65.1792 126.168 li
65.3378 126.442 li
64.691 127.562 li
62.6729 124.068 mo
62.5678 123.886 li
62.7413 123.949 li
62.6729 124.068 li
.203922 .141176 .141176 rgb
f
103.969 58.285 mo
101.261 58.285 li
101.261 53.5951 li
103.969 58.285 li
100.198 58.285 mo
98.2422 58.285 li
100.198 54.8949 li
100.198 58.285 li
.415686 .415686 .415686 rgb
f
101.261 58.285 mo
100.198 58.285 li
100.198 54.8949 li
101.105 53.324 li
101.261 53.5951 li
101.261 58.285 li
.407843 .407843 .407843 rgb
f
189.211 119.48 mo
188.921 119.48 li
187.288 116.652 li
187.578 116.652 li
189.211 119.48 li
183.79 119.48 mo
183.484 119.48 li
185.118 116.652 li
185.422 116.652 li
183.79 119.48 li
.533333 .372549 .372549 rgb
f
70.348 159.191 mo
73.2109 154.23 li
67.484 154.23 li
cp
0 0 0 rgb
f
78.0512 123.191 mo
75.1878 118.234 li
78.999 118.234 li
79.2473 118.809 79.7278 119.178 80.2744 119.342 cv
78.0512 123.191 li
.219608 .219608 .219608 rgb
f
80.2744 119.342 mo
79.7278 119.178 79.2473 118.809 78.999 118.234 cv
80.6999 118.234 li
80.807 118.419 li
80.2744 119.342 li
.141176 .141176 .141176 rgb
f
80.807 118.419 mo
80.6999 118.234 li
80.9141 118.234 li
80.807 118.419 li
0 0 0 rgb
f
61.357 158.78 mo
60.2936 158.78 59.2301 158.072 59.2301 156.656 cv
59.2301 155.238 60.2936 154.529 61.357 154.529 cv
62.4205 154.529 63.484 155.238 63.484 156.656 cv
63.484 158.072 62.4205 158.78 61.357 158.78 cv
.00392157 .00392157 .00392157 rgb
f
141.398 84 mo
135.672 84 li
137.691 80.5016 li
139.379 80.5016 li
141.398 84 li
139.134 80.0764 mo
137.936 80.0764 li
138.535 79.0389 li
139.134 80.0764 li
.662745 .662745 .662745 rgb
f
139.379 80.5016 mo
137.691 80.5016 li
137.936 80.0764 li
139.134 80.0764 li
139.379 80.5016 li
.596078 .596078 .596078 rgb
f
83.7186 118.394 mo
83.568 118.376 83.4193 118.343 83.2758 118.295 cv
83.7186 118.394 li
.317647 .317647 .317647 rgb
f
84.01 118.412 mo
83.9126 118.412 83.8151 118.406 83.7186 118.394 cv
83.2758 118.295 li
83.1564 118.256 83.0405 118.206 82.9299 118.147 cv
83.022 117.903 83.0737 117.625 83.0737 117.312 cv
83.0737 117.025 83.0299 116.766 82.9511 116.537 cv
84.1988 114.375 li
83.0312 114.375 li
83.3347 114.232 83.6724 114.161 84.01 114.161 cv
85.0735 114.161 86.1371 114.869 86.1371 116.285 cv
86.1371 117.703 85.0735 118.412 84.01 118.412 cv
.317647 .223529 .223529 rgb
f
82.9299 118.147 mo
82.6963 118.021 82.4865 117.851 82.317 117.636 cv
82.9511 116.537 li
83.0299 116.766 83.0737 117.025 83.0737 117.312 cv
83.0737 117.625 83.022 117.903 82.9299 118.147 cv
.203922 .141176 .141176 rgb
f
82.317 117.636 mo
82.0496 117.297 81.8829 116.846 81.8829 116.285 cv
81.8829 115.318 82.3783 114.682 83.0312 114.375 cv
84.1988 114.375 li
82.9511 116.537 li
82.317 117.636 li
0 0 0 rgb
f
61.098 116.508 mo
59.24 113.29 li
59.3553 113.09 li
61.3121 113.508 li
62.6629 113.796 li
61.098 116.508 li
.0588235 .0588235 .0588235 rgb
f
62.6629 113.796 mo
61.3121 113.508 li
59.3553 113.09 li
60.246 111.547 li
63.9609 111.547 li
62.6629 113.796 li
.0588235 .0392157 .0392157 rgb
f
62.8629 151.477 mo
65.727 146.516 li
60 146.516 li
cp
0 0 0 rgb
f
62.3293 104.379 mo
61.6001 104.104 61.023 103.445 61.023 102.402 cv
61.023 100.984 62.0865 100.275 63.15 100.275 cv
64.2135 100.275 65.277 100.984 65.277 102.402 cv
65.277 102.428 65.2767 102.455 65.2759 102.48 cv
65.0152 102.382 64.7352 102.333 64.4551 102.333 cv
63.4113 102.333 62.3676 103.015 62.3293 104.379 cv
.215686 .14902 .14902 rgb
f
134.693 130.797 mo
131.621 130.797 li
132.033 130.083 li
132.414 130.184 li
134.693 130.797 li
.298039 .298039 .298039 rgb
f
137.348 130.797 mo
134.693 130.797 li
132.414 130.184 li
132.033 130.083 li
134.404 125.975 li
134.595 126.028 li
137.348 130.797 li
.298039 .207843 .207843 rgb
f
134.595 126.028 mo
134.404 125.975 li
134.484 125.836 li
134.595 126.028 li
.180392 0 0 rgb
f
62.6289 151.219 mo
65.4922 146.258 li
59.766 146.258 li
cp
0 0 0 rgb
f
84.832 130.941 mo
84.832 133.777 80.578 133.777 80.578 130.941 cv
80.578 128.109 84.832 128.109 84.832 130.941 cv
0 0 0 rgb
f
189.902 113.055 mo
187.388 113.055 li
186.602 111.695 li
185.816 113.055 li
184.176 113.055 li
185.141 111.384 li
189.454 112.279 li
189.902 113.055 li
188.742 111.046 mo
185.7 110.414 li
187.039 108.094 li
188.742 111.046 li
.627451 .439216 .439216 rgb
f
189.454 112.279 mo
185.141 111.384 li
185.7 110.414 li
188.742 111.046 li
189.454 112.279 li
.376471 0 0 rgb
f
87.2621 134.504 mo
90.125 129.547 li
84.398 129.547 li
87.2621 134.504 li
0 0 0 rgb
f
61.023 109.344 mo
61.023 112.18 56.7729 112.18 56.7729 109.344 cv
56.7729 106.508 61.023 106.508 61.023 109.344 cv
f
67.9609 166.133 mo
65.098 161.172 li
70.8238 161.172 li
67.9609 166.133 li
.435294 .435294 .435294 rgb
f
103.699 129.879 mo
106.562 124.918 li
100.836 124.918 li
cp
0 0 0 rgb
f
67.9921 137.332 mo
70.8551 132.375 li
65.1289 132.375 li
67.9921 137.332 li
0 0 0 rgb
f
61.609 145.82 mo
64.473 140.859 li
58.7461 140.859 li
cp
0 0 0 rgb
f
57.5309 116.25 mo
60.3949 111.289 li
54.6679 111.289 li
57.5309 116.25 li
0 0 0 rgb
f
73.356 127.804 mo
71.098 126.992 li
70.3691 126.728 li
70.6786 126.577 71.0248 126.502 71.3711 126.502 cv
72.2023 126.502 73.0334 126.936 73.356 127.804 cv
.00392157 .00392157 .00392157 rgb
f
71.3711 130.753 mo
71.2637 130.753 71.1565 130.746 71.0502 130.731 cv
71.141 130.574 li
70.4719 130.574 li
69.7814 130.282 69.2461 129.634 69.2461 128.629 cv
69.2461 127.673 69.729 127.039 70.3691 126.728 cv
71.098 126.992 li
73.356 127.804 li
73.4458 128.045 73.4962 128.32 73.4962 128.629 cv
73.4962 130.045 72.4336 130.753 71.3711 130.753 cv
f
61.734 147.363 mo
64.598 142.402 li
58.8711 142.402 li
cp
0 0 0 rgb
f
63.766 151.988 mo
66.6289 147.031 li
60.902 147.031 li
cp
f
61.652 162.531 mo
64.516 157.574 li
58.7891 157.574 li
cp
f
65.3121 157.902 mo
68.1762 152.945 li
62.4488 152.945 li
cp
f
85.6719 76.2851 mo
79.9449 76.2851 li
81.4287 73.7149 li
82.9488 73.7149 li
82.1894 72.3972 li
82.8091 71.324 li
85.6719 76.2851 li
.137255 .137255 .137255 rgb
f
159.73 76.2851 mo
154.004 76.2851 li
156.867 71.324 li
159.73 76.2851 li
.478431 .478431 .478431 rgb
f
59.8551 110.594 mo
62.7191 105.633 li
56.9922 105.633 li
59.8551 110.594 li
0 0 0 rgb
f
64.7229 129.398 mo
64.7229 132.234 60.4691 132.234 60.4691 129.398 cv
60.4691 126.566 64.7229 126.566 64.7229 129.398 cv
f
59.5121 118.305 mo
62.375 113.348 li
56.648 113.348 li
cp
0 0 0 rgb
f
57.0101 108.299 mo
56.9394 108.254 56.8714 108.204 56.8067 108.15 cv
56.8067 104.882 li
57.1997 104.553 57.7113 104.389 58.223 104.389 cv
58.223 104.539 li
58.0823 105.052 li
58.223 105.09 li
58.223 105.633 li
56.9922 105.633 li
57.9113 107.226 li
57.7357 107.53 li
57.4369 107.709 57.1823 107.965 57.0101 108.299 cv
56.3815 107.646 mo
56.2036 107.34 56.098 106.963 56.098 106.516 cv
56.098 106.069 56.2036 105.692 56.3815 105.386 cv
56.3815 107.646 li
.341176 .341176 .341176 rgb
f
56.8067 108.15 mo
56.6409 108.011 56.4962 107.843 56.3815 107.646 cv
56.3815 105.386 li
56.4962 105.189 56.6409 105.021 56.8067 104.882 cv
56.8067 108.15 li
.305882 .305882 .305882 rgb
f
58.8312 105.633 mo
58.223 105.633 li
58.223 105.09 li
59.0185 105.309 li
58.8312 105.633 li
58.223 104.539 mo
58.223 104.389 li
58.223 104.389 li
58.2368 104.389 58.2504 104.389 58.2641 104.389 cv
58.223 104.539 li
.341176 .239216 .239216 rgb
f
59.0185 105.309 mo
58.223 105.09 li
58.0823 105.052 li
58.223 104.539 li
58.2641 104.389 li
58.653 104.396 59.0401 104.498 59.3732 104.694 cv
59.0185 105.309 li
.203922 0 0 rgb
f
58.223 108.643 mo
57.7957 108.643 57.3683 108.528 57.0101 108.299 cv
57.1823 107.965 57.4369 107.709 57.7357 107.53 cv
57.516 107.91 li
58.3062 107.91 li
58.7012 108.594 li
58.5443 108.627 58.3836 108.643 58.223 108.643 cv
0 0 0 rgb
f
58.7012 108.594 mo
58.3062 107.91 li
59.8793 107.91 li
59.5757 108.273 59.1538 108.501 58.7012 108.594 cv
57.9113 107.226 mo
56.9922 105.633 li
58.223 105.633 li
58.8312 105.633 li
57.9113 107.226 li
f
75.4102 35.145 mo
69.6839 35.145 li
72.5469 30.184 li
75.4102 35.145 li
.423529 .423529 .423529 rgb
f
148.035 78.34 mo
145.076 78.34 li
145.076 73.5501 li
145.172 73.3831 li
148.035 78.34 li
144.65 78.34 mo
142.309 78.34 li
144.65 74.2862 li
144.65 78.34 li
.709804 .709804 .709804 rgb
f
145.076 78.34 mo
144.65 78.34 li
144.65 74.2862 li
145.076 73.5501 li
145.076 78.34 li
.639216 .639216 .639216 rgb
f
68.277 135.535 mo
71.141 130.574 li
65.4141 130.574 li
68.277 135.535 li
0 0 0 rgb
f
126.089 92.571 mo
124.319 92.2284 li
125.105 90.867 li
126.089 92.571 li
.431373 .431373 .431373 rgb
f
127.969 95.824 mo
122.242 95.824 li
124.319 92.2284 li
126.089 92.571 li
127.969 95.824 li
.431373 .301961 .301961 rgb
f
70.2379 151.219 mo
73.102 146.258 li
67.375 146.258 li
cp
0 0 0 rgb
f
55.6211 124.608 mo
55.355 124.148 li
55.6211 124.148 li
55.6211 124.608 li
.129412 .129412 .129412 rgb
f
58.2192 129.105 mo
55.6211 124.608 li
55.6211 124.148 li
61.082 124.148 li
58.2192 129.105 li
.129412 .0901961 .0901961 rgb
f
64.352 27.904 mo
63.2895 27.904 62.227 27.195 62.227 25.777 cv
62.227 24.359 63.2895 23.65 64.352 23.65 cv
65.4145 23.65 66.477 24.359 66.477 25.777 cv
66.477 27.195 65.4145 27.904 64.352 27.904 cv
.407843 .407843 .407843 rgb
f
201.16 113.973 mo
201.16 116.805 196.91 116.805 196.91 113.973 cv
196.91 111.137 201.16 111.137 201.16 113.973 cv
0 0 0 rgb
f
260.438 216.531 mo
257.574 211.57 li
263.301 211.57 li
260.438 216.531 li
.686274 .686274 .686274 rgb
f
206.773 151.219 mo
209.637 146.258 li
203.91 146.258 li
206.773 151.219 li
0 0 0 rgb
f
201.773 175.391 mo
204.637 170.43 li
198.91 170.43 li
cp
0 0 0 rgb
f
281.863 174.508 mo
277.4 174.508 li
277.401 174.472 277.402 174.435 277.402 174.398 cv
277.402 173.841 277.238 173.394 276.975 173.056 cv
279 169.547 li
281.863 174.508 li
.670588 .466667 .466667 rgb
f
220.383 126.68 mo
214.656 126.68 li
217.52 121.723 li
220.383 126.68 li
.572549 .4 .4 rgb
f
203.246 140.715 mo
203.246 143.547 198.996 143.547 198.996 140.715 cv
198.996 137.879 203.246 137.879 203.246 140.715 cv
0 0 0 rgb
f
230.141 145.086 mo
230.141 147.918 225.887 147.918 225.887 145.086 cv
225.887 142.25 230.141 142.25 230.141 145.086 cv
0 0 0 rgb
f
213.258 101.996 mo
207.535 101.996 li
210.395 97.039 li
213.258 101.996 li
.466667 .466667 .466667 rgb
f
236.953 144.089 mo
235.972 143.886 li
236.018 143.702 236.043 143.502 236.043 143.285 cv
236.043 142.145 235.356 141.463 234.535 141.24 cv
234.84 140.329 235.692 139.873 236.545 139.873 cv
237.608 139.873 238.672 140.582 238.672 142 cv
238.672 143.234 237.865 143.93 236.953 144.089 cv
.478431 .478431 .478431 rgb
f
236.545 144.124 mo
236.336 144.124 236.127 144.097 235.926 144.042 cv
235.943 143.991 235.959 143.939 235.972 143.886 cv
236.953 144.089 li
236.819 144.112 236.682 144.124 236.545 144.124 cv
.478431 .333333 .333333 rgb
f
302.441 171.639 mo
302.441 171.639 li
302.441 167.385 li
302.441 167.385 li
303.504 167.385 304.566 168.094 304.566 169.512 cv
304.566 170.93 303.504 171.639 302.441 171.639 cv
.717647 .717647 .717647 rgb
f
302.441 171.639 mo
301.378 171.639 300.316 170.93 300.316 169.512 cv
300.316 168.094 301.378 167.385 302.441 167.385 cv
302.441 171.639 li
.717647 .501961 .501961 rgb
f
294.946 186.703 mo
293.996 186.488 li
290.902 185.785 li
290.503 185.694 li
290.152 185.086 li
295.879 185.086 li
294.946 186.703 li
.698039 .698039 .698039 rgb
f
293.016 190.047 mo
290.503 185.694 li
290.902 185.785 li
293.996 186.488 li
294.946 186.703 li
293.016 190.047 li
.698039 .486274 .486274 rgb
f
214.547 149.199 mo
214.547 152.031 210.297 152.031 210.297 149.199 cv
210.297 146.363 214.547 146.363 214.547 149.199 cv
0 0 0 rgb
f
252.707 160.065 mo
251.645 160.065 250.582 159.357 250.582 157.941 cv
250.582 157.903 250.583 157.865 250.584 157.828 cv
250.813 157.891 li
251.094 156.866 li
250.87 156.804 li
251.257 156.144 251.982 155.814 252.707 155.814 cv
253.77 155.814 254.832 156.523 254.832 157.941 cv
254.832 159.357 253.77 160.065 252.707 160.065 cv
.47451 .329412 .329412 rgb
f
250.813 157.891 mo
250.584 157.828 li
250.601 157.427 250.705 157.086 250.87 156.804 cv
251.094 156.866 li
250.813 157.891 li
.286274 0 0 rgb
f
200.359 166.426 mo
200.359 169.262 196.105 169.262 196.105 166.426 cv
196.105 163.59 200.359 163.59 200.359 166.426 cv
0 0 0 rgb
f
235.27 143.74 mo
234.43 143.566 li
233.35 143.339 li
233.35 141.227 li
233.535 141.181 233.726 141.158 233.918 141.158 cv
234.126 141.158 234.335 141.185 234.535 141.24 cv
234.46 141.465 234.418 141.719 234.418 142 cv
234.418 142.814 234.769 143.394 235.27 143.74 cv
232.924 143.25 mo
231.806 143.016 li
231.889 142.205 232.342 141.66 232.924 141.38 cv
232.924 143.25 li
.682353 .682353 .682353 rgb
f
233.35 143.339 mo
232.924 143.25 li
232.924 141.38 li
233.06 141.315 233.203 141.264 233.35 141.227 cv
233.35 143.339 li
.611765 .611765 .611765 rgb
f
233.918 145.409 mo
232.855 145.409 231.793 144.701 231.793 143.285 cv
231.793 143.192 231.797 143.102 231.806 143.016 cv
232.924 143.25 li
233.35 143.339 li
234.43 143.566 li
235.27 143.74 li
235.47 143.878 235.693 143.978 235.926 144.042 cv
235.623 144.953 234.77 145.409 233.918 145.409 cv
.682353 .47451 .47451 rgb
f
235.972 143.886 mo
235.27 143.74 li
234.769 143.394 234.418 142.814 234.418 142 cv
234.418 141.719 234.46 141.465 234.535 141.24 cv
235.356 141.463 236.043 142.145 236.043 143.285 cv
236.043 143.502 236.018 143.702 235.972 143.886 cv
.32549 .32549 .32549 rgb
f
235.926 144.042 mo
235.693 143.978 235.47 143.878 235.27 143.74 cv
235.972 143.886 li
235.959 143.939 235.943 143.991 235.926 144.042 cv
.32549 .227451 .227451 rgb
f
165.164 123.299 mo
164.101 123.299 163.039 122.59 163.039 121.172 cv
163.039 119.754 164.101 119.045 165.164 119.045 cv
166.226 119.045 167.289 119.754 167.289 121.172 cv
167.289 122.59 166.226 123.299 165.164 123.299 cv
.631373 .631373 .631373 rgb
f
189.465 116.652 mo
187.578 116.652 li
186.348 114.523 li
185.118 116.652 li
183.738 116.652 li
185.816 113.055 li
187.388 113.055 li
189.465 116.652 li
.235294 .164706 .164706 rgb
f
187.578 116.652 mo
187.288 116.652 li
186.355 115.035 li
185.422 116.652 li
185.118 116.652 li
186.348 114.523 li
187.578 116.652 li
.12549 .0862745 .0862745 rgb
f
187.388 113.055 mo
185.816 113.055 li
186.602 111.695 li
187.388 113.055 li
.14902 .101961 .101961 rgb
f
231.422 122.309 mo
225.695 122.309 li
226.988 120.071 li
229.08 120.504 li
230.557 120.812 li
231.422 122.309 li
229.845 119.578 mo
229.296 119.464 li
227.548 119.101 li
228.559 117.352 li
229.845 119.578 li
.709804 .494118 .494118 rgb
f
230.557 120.812 mo
229.08 120.504 li
226.988 120.071 li
227.548 119.101 li
229.296 119.464 li
229.845 119.578 li
230.557 120.812 li
.427451 0 0 rgb
f
232.916 137.182 mo
231.852 137.182 230.789 136.473 230.789 135.055 cv
230.789 134.926 230.798 134.802 230.815 134.684 cv
231.953 135.043 li
232.924 135.348 li
232.924 137.182 li
232.922 137.182 232.919 137.182 232.916 137.182 cv
233.35 137.142 mo
233.35 135.482 li
234.723 135.914 li
234.871 135.961 li
234.59 136.628 233.998 137.022 233.35 137.142 cv
.603922 .603922 .603922 rgb
f
232.924 137.182 mo
232.924 135.348 li
233.35 135.482 li
233.35 137.142 li
233.21 137.168 233.067 137.182 232.924 137.182 cv
.541176 .541176 .541176 rgb
f
234.871 135.961 mo
234.723 135.914 li
233.35 135.482 li
232.924 135.348 li
231.953 135.043 li
230.815 134.684 li
230.983 133.516 231.95 132.931 232.916 132.931 cv
233.98 132.931 235.043 133.639 235.043 135.055 cv
235.043 135.399 234.981 135.7 234.871 135.961 cv
.603922 .419608 .419608 rgb
f
226.047 127.154 mo
224.985 127.154 223.922 126.445 223.922 125.027 cv
223.922 123.611 224.985 122.903 226.047 122.903 cv
227.109 122.903 228.172 123.611 228.172 125.027 cv
228.172 126.445 227.109 127.154 226.047 127.154 cv
.537255 .376471 .376471 rgb
f
173.836 148.391 mo
171.754 144.783 li
173.17 144.783 li
173.011 145.078 172.918 145.435 172.918 145.855 cv
172.918 146.874 173.466 147.527 174.169 147.813 cv
173.836 148.391 li
173.481 144.357 mo
171.508 144.357 li
170.973 143.43 li
175.408 143.43 li
175.394 143.533 175.385 143.641 175.383 143.753 cv
175.271 143.737 175.157 143.729 175.043 143.729 cv
174.465 143.729 173.888 143.938 173.481 144.357 cv
.580392 .580392 .580392 rgb
f
173.17 144.783 mo
171.754 144.783 li
171.508 144.357 li
173.481 144.357 li
173.361 144.481 173.256 144.623 173.17 144.783 cv
.521569 .521569 .521569 rgb
f
176.308 144.107 mo
176.033 143.919 175.714 143.801 175.383 143.753 cv
175.385 143.641 175.394 143.533 175.408 143.43 cv
176.699 143.43 li
176.308 144.107 li
.133333 .133333 .133333 rgb
f
169.469 141.296 mo
168.741 141.296 168.013 140.963 167.626 140.298 cv
169.512 140.875 li
170.336 141.13 li
170.063 141.241 169.766 141.296 169.469 141.296 cv
.631373 .631373 .631373 rgb
f
170.336 141.13 mo
169.512 140.875 li
167.626 140.298 li
167.449 139.993 167.344 139.618 167.344 139.172 cv
167.344 137.887 168.217 137.184 169.171 137.064 cv
168.911 137.401 168.75 137.846 168.75 138.398 cv
168.75 138.656 168.785 138.891 168.849 139.102 cv
168.746 139.281 li
168.913 139.281 li
169.25 140.11 170.062 140.525 170.875 140.525 cv
170.974 140.525 171.073 140.519 171.172 140.506 cv
170.951 140.792 170.66 141 170.336 141.13 cv
.631373 .439216 .439216 rgb
f
168.913 139.281 mo
168.746 139.281 li
168.849 139.102 li
168.868 139.164 168.889 139.223 168.913 139.281 cv
.278431 .196078 .196078 rgb
f
300.188 212.156 mo
300.188 212.156 li
300.188 209.065 li
301.973 209.065 li
300.188 212.156 li
302.219 208.639 mo
300.188 208.639 li
300.188 207.199 li
303.051 207.199 li
302.219 208.639 li
.686274 .686274 .686274 rgb
f
301.973 209.065 mo
300.188 209.065 li
300.188 208.639 li
302.219 208.639 li
301.973 209.065 li
.615686 .615686 .615686 rgb
f
300.188 212.156 mo
297.324 207.199 li
300.188 207.199 li
300.188 208.639 li
300.188 209.065 li
300.188 212.156 li
.686274 .478431 .478431 rgb
f
154.773 159.445 mo
151.91 154.488 li
157.637 154.488 li
154.773 159.445 li
.690196 .482353 .482353 rgb
f
188.353 143.353 mo
187.29 143.353 186.227 142.645 186.227 141.227 cv
186.227 139.811 187.29 139.103 188.353 139.103 cv
189.111 139.103 189.868 139.462 190.241 140.181 cv
189.584 140.002 li
189.584 140.002 li
189.304 141.027 li
190.477 141.347 li
190.419 142.684 189.386 143.353 188.353 143.353 cv
.180392 .12549 .12549 rgb
f
190.477 141.347 mo
189.304 141.027 li
189.584 140.002 li
189.584 140.002 li
190.241 140.181 li
190.392 140.471 190.48 140.82 190.48 141.227 cv
190.48 141.268 190.479 141.308 190.477 141.347 cv
.109804 0 0 rgb
f
275.361 176.179 mo
274.063 176.179 li
273.805 176.015 273.582 175.791 273.421 175.508 cv
274.617 175.922 li
275.361 176.179 li
.717647 .717647 .717647 rgb
f
275.275 176.522 mo
274.848 176.522 274.421 176.408 274.063 176.179 cv
275.361 176.179 li
276.012 176.404 li
275.775 176.483 275.525 176.522 275.275 176.522 cv
.701961 .701961 .701961 rgb
f
276.012 176.404 mo
275.361 176.179 li
274.617 175.922 li
273.421 175.508 li
273.25 175.206 273.148 174.836 273.148 174.398 cv
273.148 172.98 274.211 172.271 275.275 172.271 cv
275.921 172.271 276.567 172.533 276.975 173.056 cv
276.137 174.508 li
277.4 174.508 li
277.359 175.526 276.754 176.158 276.012 176.404 cv
.717647 .501961 .501961 rgb
f
277.4 174.508 mo
276.137 174.508 li
276.975 173.056 li
277.238 173.394 277.402 173.841 277.402 174.398 cv
277.402 174.435 277.401 174.472 277.4 174.508 cv
.482353 .333333 .333333 rgb
f
262.82 148.906 mo
260.44 144.783 li
262.692 144.783 li
264.81 145.458 li
262.82 148.906 li
261.355 144.357 mo
260.195 144.357 li
259.957 143.945 li
260.057 143.945 li
261.355 144.357 li
.631373 .631373 .631373 rgb
f
262.692 144.783 mo
260.44 144.783 li
260.195 144.357 li
261.355 144.357 li
262.395 144.688 li
262.692 144.783 li
.568627 .568627 .568627 rgb
f
264.81 145.458 mo
262.692 144.783 li
262.395 144.688 li
261.355 144.357 li
260.057 143.945 li
265.684 143.945 li
264.81 145.458 li
.631373 .439216 .439216 rgb
f
187.201 133.352 mo
184.984 132.848 li
183.375 130.059 li
188.3 130.059 li
188.468 130.35 li
188.468 131.157 li
187.201 133.352 li
.105882 .105882 .105882 rgb
f
188.468 131.157 mo
188.468 130.35 li
188.701 130.753 li
188.468 131.157 li
.101961 .101961 .101961 rgb
f
186.238 135.02 mo
184.984 132.848 li
187.201 133.352 li
186.238 135.02 li
.105882 .0745098 .0745098 rgb
f
132.016 122.199 mo
132.016 125.035 127.766 125.035 127.766 122.199 cv
127.766 119.363 132.016 119.363 132.016 122.199 cv
0 0 0 rgb
f
183.844 167.01 mo
182.782 167.01 181.719 166.301 181.719 164.883 cv
181.719 163.465 182.782 162.756 183.844 162.756 cv
184.906 162.756 185.969 163.465 185.969 164.883 cv
185.969 166.301 184.906 167.01 183.844 167.01 cv
.352941 .247059 .247059 rgb
f
180.738 156.105 mo
177.875 151.145 li
183.602 151.145 li
180.738 156.105 li
.490196 .490196 .490196 rgb
f
227.324 202.129 mo
224.461 197.172 li
230.188 197.172 li
227.324 202.129 li
.643137 .643137 .643137 rgb
f
128.907 124.109 mo
127.808 124.109 li
128.031 123.297 li
128.238 123.668 128.548 123.939 128.907 124.109 cv
127.597 124.109 mo
125.046 124.109 li
125.01 123.98 124.963 123.86 124.907 123.749 cv
125.095 123.423 li
126.093 123.697 li
127.597 124.109 li
127.936 123.1 mo
126.375 122.671 li
125.645 122.471 li
127.562 119.152 li
128.411 120.621 li
128.023 120.976 127.766 121.501 127.766 122.199 cv
127.766 122.54 127.828 122.84 127.936 123.1 cv
.517647 .360784 .360784 rgb
f
127.808 124.109 mo
127.597 124.109 li
126.093 123.697 li
125.095 123.423 li
125.645 122.471 li
126.375 122.671 li
127.936 123.1 li
127.964 123.168 127.996 123.234 128.031 123.297 cv
127.808 124.109 li
.309804 0 0 rgb
f
130.426 124.109 mo
128.907 124.109 li
128.548 123.939 128.238 123.668 128.031 123.297 cv
127.996 123.234 127.964 123.168 127.936 123.1 cv
127.828 122.84 127.766 122.54 127.766 122.199 cv
127.766 121.501 128.023 120.976 128.411 120.621 cv
130.426 124.109 li
0 0 0 rgb
f
185.066 183.875 mo
182.203 178.914 li
187.93 178.914 li
187.781 179.172 li
184.809 179.172 li
186.295 181.747 li
185.066 183.875 li
.329412 .329412 .329412 rgb
f
125.131 124.66 mo
120.881 124.66 li
120.935 123.317 121.97 122.646 123.006 122.646 cv
123.265 122.646 123.523 122.688 123.766 122.772 cv
123.693 123.038 li
124.576 123.281 li
124.706 123.415 124.818 123.571 124.907 123.749 cv
124.699 124.109 li
125.046 124.109 li
125.094 124.278 125.123 124.462 125.131 124.66 cv
.2 .141176 .141176 rgb
f
124.576 123.281 mo
123.693 123.038 li
123.766 122.772 li
124.07 122.876 124.35 123.046 124.576 123.281 cv
.121569 0 0 rgb
f
125.046 124.109 mo
124.699 124.109 li
124.907 123.749 li
124.963 123.86 125.01 123.98 125.046 124.109 cv
.101961 .0705882 .0705882 rgb
f
176.547 187.473 mo
173.684 182.516 li
179.41 182.516 li
176.547 187.473 li
.623529 .623529 .623529 rgb
f
196.561 208.408 mo
195.498 208.408 194.434 207.699 194.434 206.281 cv
194.434 204.863 195.498 204.154 196.561 204.154 cv
197.624 204.154 198.688 204.863 198.688 206.281 cv
198.688 207.699 197.624 208.408 196.561 208.408 cv
.72549 .72549 .72549 rgb
f
126.82 79.883 mo
121.094 79.883 li
123.619 75.512 li
124.295 75.512 li
126.82 79.883 li
.682353 .682353 .682353 rgb
f
150.109 114.191 mo
149.399 112.961 li
150.819 112.961 li
150.109 114.191 li
151.313 111.899 mo
148.785 111.899 li
147.606 109.857 li
148.934 110.207 li
151.699 110.949 li
151.783 110.972 li
151.56 111.215 151.394 111.524 151.313 111.899 cv
.694118 .694118 .694118 rgb
f
150.819 112.961 mo
149.399 112.961 li
148.785 111.899 li
151.313 111.899 li
151.293 111.99 151.278 112.084 151.269 112.183 cv
150.819 112.961 li
.682353 .682353 .682353 rgb
f
151.783 110.972 mo
151.699 110.949 li
148.934 110.207 li
147.606 109.857 li
147.246 109.234 li
152.973 109.234 li
152.677 109.746 li
151.703 109.746 li
152.19 110.59 li
152.148 110.661 li
152.016 110.749 151.892 110.852 151.783 110.972 cv
.694118 .486274 .486274 rgb
f
157.57 125.395 mo
154.07 125.395 li
154.055 125.391 li
152.133 124.895 li
152.438 124.367 li
156.508 124.367 li
154.474 120.842 li
154.707 120.438 li
157.57 125.395 li
.682353 .682353 .682353 rgb
f
154.07 125.395 mo
151.844 125.395 li
152.133 124.895 li
154.055 125.391 li
154.07 125.395 li
.682353 .47451 .47451 rgb
f
187.672 184.133 mo
186.295 181.747 li
187.781 179.172 li
188.468 179.172 li
188.468 182.753 li
187.672 184.133 li
189.531 180.911 mo
189.531 179.172 li
190.21 179.172 li
190.477 179.272 li
189.531 180.911 li
.643137 .643137 .643137 rgb
f
188.468 182.753 mo
188.468 179.172 li
189.531 179.172 li
189.531 180.911 li
188.468 182.753 li
.631373 .631373 .631373 rgb
f
190.477 179.272 mo
190.21 179.172 li
190.535 179.172 li
190.477 179.272 li
.643137 .447059 .447059 rgb
f
186.295 181.747 mo
184.809 179.172 li
187.781 179.172 li
186.295 181.747 li
.211765 .211765 .211765 rgb
f
158.348 116.766 mo
156.152 112.961 li
159.013 112.961 li
160.004 113.238 li
160.331 113.33 li
158.348 116.766 li
.65098 .65098 .65098 rgb
f
159.013 112.961 mo
156.152 112.961 li
155.863 112.461 li
156.049 112.138 li
157.234 112.465 li
159.013 112.961 li
.639216 .639216 .639216 rgb
f
160.331 113.33 mo
160.004 113.238 li
159.013 112.961 li
157.234 112.465 li
156.049 112.138 li
156.241 111.805 li
161.211 111.805 li
160.331 113.33 li
.65098 .454902 .454902 rgb
f
122.649 116.769 mo
120.051 116.004 li
119.643 115.883 li
122.137 115.883 li
122.649 116.769 li
.254902 .254902 .254902 rgb
f
123.473 118.195 mo
117.746 118.195 li
119.081 115.883 li
119.643 115.883 li
120.051 116.004 li
122.649 116.769 li
123.473 118.195 li
.254902 .176471 .176471 rgb
f
129.23 184.902 mo
126.367 179.945 li
132.094 179.945 li
129.23 184.902 li
.529412 .529412 .529412 rgb
f
169.039 164.182 mo
167.976 164.182 166.914 163.473 166.914 162.055 cv
166.914 162.023 166.914 161.992 166.916 161.961 cv
167.925 160.213 li
168.262 160.023 168.65 159.928 169.039 159.928 cv
170.101 159.928 171.164 160.637 171.164 162.055 cv
171.164 163.026 170.666 163.664 170.011 163.97 cv
169.532 163.822 li
169.431 164.15 li
169.301 164.171 169.17 164.182 169.039 164.182 cv
.635294 .443137 .443137 rgb
f
169.431 164.15 mo
169.532 163.822 li
170.011 163.97 li
169.827 164.056 169.632 164.116 169.431 164.15 cv
.380392 0 0 rgb
f
97.1128 94.027 mo
91.3871 94.027 li
92.4715 92.1478 li
93.478 92.3564 li
96.244 92.9304 li
96.2434 92.9303 li
96.5123 92.9864 li
97.1128 94.027 li
95.8004 91.7528 mo
93.6938 91.3156 li
93.031 91.1783 li
94.25 89.066 li
95.8004 91.7528 li
.513725 .356863 .356863 rgb
f
96.5123 92.9864 mo
96.2434 92.9303 li
96.244 92.9304 li
93.478 92.3564 li
92.4715 92.1478 li
93.031 91.1783 li
93.6938 91.3156 li
95.8004 91.7528 li
96.5123 92.9864 li
.309804 0 0 rgb
f
138.628 94.8214 mo
138.19 94.7491 li
135.566 90.207 li
141.293 90.207 li
138.628 94.8214 li
.741176 .741176 .741176 rgb
f
138.43 95.164 mo
138.19 94.7491 li
138.628 94.8214 li
138.43 95.164 li
.741176 .517647 .517647 rgb
f
120.176 79.625 mo
116.623 79.625 li
117.273 79.3168 117.766 78.6802 117.766 77.715 cv
117.766 76.7631 117.285 76.1311 116.647 75.8191 cv
117.312 74.668 li
120.176 79.625 li
114.655 79.625 mo
114.449 79.625 li
114.497 79.5419 li
114.548 79.5719 114.601 79.5995 114.655 79.625 cv
.631373 .631373 .631373 rgb
f
155.727 23.059 mo
150 23.059 li
152.863 18.098 li
155.727 23.059 li
.701961 .701961 .701961 rgb
f
159.207 123.299 mo
158.394 123.299 157.582 122.884 157.245 122.055 cv
161.169 122.055 li
160.832 122.884 160.02 123.299 159.207 123.299 cv
157.083 121.228 mo
157.082 121.209 157.082 121.191 157.082 121.172 cv
157.082 120.211 157.57 119.576 158.215 119.266 cv
157.083 121.228 li
.392157 .392157 .392157 rgb
f
153.008 84.254 mo
147.281 84.254 li
149.449 80.5016 li
150.841 80.5016 li
153.008 84.254 li
150.595 80.0764 mo
149.695 80.0764 li
150.145 79.297 li
150.595 80.0764 li
.337255 .337255 .337255 rgb
f
150.841 80.5016 mo
149.449 80.5016 li
149.695 80.0764 li
150.595 80.0764 li
150.841 80.5016 li
.301961 .301961 .301961 rgb
f
124.727 75.512 mo
124.295 75.512 li
123.957 74.926 li
123.619 75.512 li
119 75.512 li
121.863 70.555 li
124.727 75.512 li
.72549 .72549 .72549 rgb
f
124.295 75.512 mo
123.619 75.512 li
123.957 74.926 li
124.295 75.512 li
.494118 .494118 .494118 rgb
f
166.984 113.783 mo
165.922 113.783 164.859 113.074 164.859 111.656 cv
164.859 110.24 165.922 109.532 166.984 109.532 cv
168.047 109.532 169.109 110.24 169.109 111.656 cv
169.109 113.074 168.047 113.783 166.984 113.783 cv
.72549 .505882 .505882 rgb
f
147.59 114.082 mo
145.076 114.082 li
145.076 113.149 li
145.314 113.229 145.567 113.269 145.82 113.269 cv
146.215 113.269 146.61 113.171 146.951 112.975 cv
147.59 114.082 li
144.65 114.082 mo
141.863 114.082 li
142.51 112.961 li
144.65 112.961 li
144.65 114.082 li
143.81 111.899 mo
143.124 111.899 li
143.707 110.888 li
143.699 110.971 143.695 111.056 143.695 111.145 cv
143.695 111.424 143.736 111.675 143.81 111.899 cv
.356863 .356863 .356863 rgb
f
144.65 112.961 mo
142.51 112.961 li
143.124 111.899 li
143.81 111.899 li
143.967 112.373 144.273 112.724 144.65 112.952 cv
144.65 112.961 li
.34902 .34902 .34902 rgb
f
145.076 114.082 mo
144.65 114.082 li
144.65 112.961 li
144.65 112.952 li
144.784 113.033 144.927 113.099 145.076 113.149 cv
145.076 114.082 li
.321569 .321569 .321569 rgb
f
144.576 109.382 mo
144.65 109.254 li
144.65 109.335 li
144.625 109.35 144.601 109.366 144.576 109.382 cv
.356863 .356863 .356863 rgb
f
144.65 109.335 mo
144.65 109.254 li
144.727 109.121 li
144.802 109.252 li
144.751 109.277 144.7 109.305 144.65 109.335 cv
.321569 .321569 .321569 rgb
f
193.662 152.096 mo
192.598 152.096 191.535 151.387 191.535 149.969 cv
191.535 149.096 191.94 148.491 192.499 148.157 cv
194.242 148.723 li
195.663 149.186 li
195.744 149.417 195.789 149.678 195.789 149.969 cv
195.789 151.387 194.726 152.096 193.662 152.096 cv
.376471 .376471 .376471 rgb
f
195.663 149.186 mo
194.242 148.723 li
192.499 148.157 li
192.847 147.949 193.254 147.845 193.662 147.845 cv
194.507 147.845 195.352 148.292 195.663 149.186 cv
.376471 .262745 .262745 rgb
f
135.383 75.77 mo
129.656 75.77 li
132.52 70.8121 li
135.383 75.77 li
.666667 .666667 .666667 rgb
f
200.801 27.945 mo
195.074 27.945 li
197.938 22.984 li
200.801 27.945 li
.74902 .74902 .74902 rgb
f
170.832 86.312 mo
167.703 86.312 li
170.566 81.352 li
172.131 84.0621 li
170.832 86.312 li
.423529 .423529 .423529 rgb
f
156.188 48.773 mo
150.461 48.773 li
150.515 48.6795 li
156.134 48.6795 li
156.188 48.773 li
155.52 47.6164 mo
151.128 47.6164 li
153.324 43.812 li
155.52 47.6164 li
.647059 .647059 .647059 rgb
f
156.134 48.6795 mo
150.515 48.6795 li
151.128 47.6164 li
155.52 47.6164 li
156.134 48.6795 li
.635294 .635294 .635294 rgb
f
153.383 114.554 mo
152.463 114.554 151.543 114.023 151.313 112.961 cv
153.559 112.961 li
154.356 114.342 li
154.054 114.483 153.718 114.554 153.383 114.554 cv
152.945 111.899 mo
151.434 111.899 li
151.944 111.016 li
152.527 111.175 li
152.945 111.899 li
.290196 .290196 .290196 rgb
f
153.559 112.961 mo
151.313 112.961 li
151.277 112.797 151.258 112.62 151.258 112.43 cv
151.258 112.345 151.262 112.263 151.269 112.183 cv
151.434 111.899 li
152.945 111.899 li
153.559 112.961 li
.286274 .286274 .286274 rgb
f
152.527 111.175 mo
151.944 111.016 li
152.148 110.661 li
152.168 110.648 152.189 110.635 152.209 110.623 cv
152.527 111.175 li
.290196 .203922 .203922 rgb
f
151.434 111.899 mo
151.313 111.899 li
151.394 111.524 151.56 111.215 151.783 110.972 cv
151.944 111.016 li
151.434 111.899 li
.2 .2 .2 rgb
f
151.269 112.183 mo
151.278 112.084 151.293 111.99 151.313 111.899 cv
151.434 111.899 li
151.269 112.183 li
.196078 .196078 .196078 rgb
f
151.944 111.016 mo
151.783 110.972 li
151.892 110.852 152.016 110.749 152.148 110.661 cv
151.944 111.016 li
.2 .141176 .141176 rgb
f
204.482 147.25 mo
200.905 147.25 li
201.922 145.488 li
201.018 145.488 li
202.863 142.293 li
205.154 146.258 li
203.91 146.258 li
204.482 147.25 li
.678431 .47451 .47451 rgb
f
205.727 147.25 mo
204.482 147.25 li
203.91 146.258 li
205.154 146.258 li
205.727 147.25 li
0 0 0 rgb
f
182.879 142.625 mo
179.327 142.625 li
178.969 142.046 178.345 141.731 177.697 141.68 cv
180.016 137.664 li
180.079 137.772 li
179.059 139.539 li
181.098 139.539 li
182.879 142.625 li
.521569 .364706 .364706 rgb
f
179.327 142.625 mo
177.152 142.625 li
177.697 141.68 li
178.345 141.731 178.969 142.046 179.327 142.625 cv
.121569 .0823529 .0823529 rgb
f
181.098 139.539 mo
179.059 139.539 li
180.079 137.772 li
181.098 139.539 li
.0666667 .0470588 .0470588 rgb
f
162.332 122.055 mo
161.169 122.055 li
161.273 121.8 161.332 121.506 161.332 121.172 cv
161.332 119.754 160.27 119.045 159.207 119.045 cv
158.864 119.045 158.522 119.119 158.215 119.266 cv
159.469 117.094 li
162.332 122.055 li
157.245 122.055 mo
156.605 122.055 li
157.083 121.228 li
157.089 121.538 157.147 121.814 157.245 122.055 cv
.745098 .745098 .745098 rgb
f
161.169 122.055 mo
157.245 122.055 li
157.147 121.814 157.089 121.538 157.083 121.228 cv
158.215 119.266 li
158.522 119.119 158.864 119.045 159.207 119.045 cv
160.27 119.045 161.332 119.754 161.332 121.172 cv
161.332 121.506 161.273 121.8 161.169 122.055 cv
.294118 .294118 .294118 rgb
f
212.168 122.566 mo
206.441 122.566 li
209.305 117.609 li
212.168 122.566 li
.529412 .368627 .368627 rgb
f
143.595 95.6285 mo
143.398 95.598 li
142.555 95.4623 li
142.547 95.3787 142.543 95.2922 142.543 95.203 cv
142.543 93.7936 143.593 93.0846 144.65 93.076 cv
144.65 93.801 li
143.595 95.6285 li
.207843 .207843 .207843 rgb
f
144.65 93.801 mo
144.65 93.076 li
144.657 93.076 144.663 93.076 144.67 93.076 cv
144.798 93.076 144.926 93.0862 145.052 93.1067 cv
144.65 93.801 li
.188235 .188235 .188235 rgb
f
143.026 96.6118 mo
142.775 96.3187 142.602 95.9355 142.555 95.4623 cv
143.398 95.598 li
143.595 95.6285 li
143.026 96.6118 li
.207843 .145098 .145098 rgb
f
146.797 95.2505 mo
145.67 93.3006 li
146.313 93.6117 146.797 94.2458 146.797 95.203 cv
146.797 95.2189 146.797 95.2348 146.797 95.2505 cv
.207843 .207843 .207843 rgb
f
166.83 62.873 mo
165.766 62.873 164.703 62.164 164.703 60.746 cv
164.703 59.328 165.766 58.619 166.83 58.619 cv
167.893 58.619 168.957 59.328 168.957 60.746 cv
168.957 62.164 167.893 62.873 166.83 62.873 cv
.603922 .603922 .603922 rgb
f
116.551 89.801 mo
116.551 92.637 112.297 92.637 112.297 89.801 cv
112.297 86.969 116.551 86.969 116.551 89.801 cv
0 0 0 rgb
f
204.711 122.824 mo
198.984 122.824 li
201.848 117.863 li
204.711 122.824 li
.490196 .341176 .341176 rgb
f
211.555 128.336 mo
208.691 123.375 li
214.418 123.375 li
211.555 128.336 li
.470588 .329412 .329412 rgb
f
189.68 132.449 mo
189.531 132.192 li
189.531 127.754 li
190.609 129.621 li
191.84 127.488 li
192.543 127.488 li
189.68 132.449 li
188.468 130.059 mo
188.3 130.059 li
186.816 127.488 li
188.468 127.488 li
188.468 130.059 li
.67451 .67451 .67451 rgb
f
189.531 132.192 mo
188.701 130.753 li
189.102 130.059 li
188.468 130.059 li
188.468 127.488 li
189.378 127.488 li
189.531 127.754 li
189.531 132.192 li
.662745 .662745 .662745 rgb
f
188.468 130.35 mo
188.3 130.059 li
188.468 130.059 li
188.468 130.35 li
.0705882 .0705882 .0705882 rgb
f
188.701 130.753 mo
188.468 130.35 li
188.468 130.059 li
189.102 130.059 li
188.701 130.753 li
f
187.805 68.055 mo
182.078 68.055 li
184.941 63.098 li
187.805 68.055 li
.529412 .529412 .529412 rgb
f
187.883 103.688 mo
187.883 106.52 183.633 106.52 183.633 103.688 cv
183.633 100.852 187.883 100.852 187.883 103.688 cv
0 0 0 rgb
f
203.008 159.484 mo
203.008 162.316 198.754 162.316 198.754 159.484 cv
198.754 156.648 203.008 156.648 203.008 159.484 cv
0 0 0 rgb
f
154.566 114.707 mo
154.356 114.342 li
154.882 114.096 155.307 113.636 155.453 112.961 cv
155.574 112.961 li
154.566 114.707 li
.403922 .403922 .403922 rgb
f
155.574 112.961 mo
155.453 112.961 li
155.489 112.797 155.508 112.62 155.508 112.43 cv
155.508 112.271 155.495 112.12 155.469 111.979 cv
155.606 112.016 li
155.863 112.461 li
155.574 112.961 li
.396078 .396078 .396078 rgb
f
155.606 112.016 mo
155.469 111.979 li
155.269 110.862 154.326 110.303 153.383 110.303 cv
152.971 110.303 152.559 110.41 152.209 110.623 cv
152.19 110.59 li
152.677 109.746 li
157.43 109.746 li
156.241 111.805 li
155.484 111.805 li
155.606 112.016 li
.403922 .282353 .282353 rgb
f
152.19 110.59 mo
151.703 109.746 li
152.677 109.746 li
152.19 110.59 li
.278431 .196078 .196078 rgb
f
155.863 112.461 mo
155.606 112.016 li
156.049 112.138 li
155.863 112.461 li
.258824 .258824 .258824 rgb
f
156.049 112.138 mo
155.606 112.016 li
155.484 111.805 li
156.241 111.805 li
156.049 112.138 li
.262745 .184314 .184314 rgb
f
154.356 114.342 mo
153.559 112.961 li
155.453 112.961 li
155.307 113.636 154.882 114.096 154.356 114.342 cv
155.178 111.899 mo
152.945 111.899 li
152.527 111.175 li
154.469 111.703 li
155.178 111.899 li
.117647 .117647 .117647 rgb
f
155.453 112.961 mo
153.559 112.961 li
152.945 111.899 li
155.178 111.899 li
155.469 111.979 li
155.495 112.12 155.508 112.271 155.508 112.43 cv
155.508 112.62 155.489 112.797 155.453 112.961 cv
.113725 .113725 .113725 rgb
f
155.469 111.979 mo
155.178 111.899 li
154.469 111.703 li
152.527 111.175 li
152.209 110.623 li
152.559 110.41 152.971 110.303 153.383 110.303 cv
154.326 110.303 155.269 110.862 155.469 111.979 cv
.117647 .0823529 .0823529 rgb
f
245.611 191.062 mo
245.638 190.917 245.652 190.762 245.652 190.598 cv
245.652 189.18 244.589 188.471 243.525 188.471 cv
243.276 188.471 243.027 188.51 242.792 188.588 cv
242.859 188.228 243.003 187.928 243.199 187.685 cv
243.361 187.735 li
243.458 187.422 li
243.851 187.093 244.363 186.928 244.875 186.928 cv
245.572 186.928 246.269 187.233 246.666 187.843 cv
246.408 188.677 li
246.993 188.858 li
246.998 188.922 247 188.988 247 189.055 cv
247 190.138 246.378 190.807 245.611 191.062 cv
.694118 .486274 .486274 rgb
f
246.993 188.858 mo
246.408 188.677 li
246.666 187.843 li
246.846 188.119 246.964 188.457 246.993 188.858 cv
243.361 187.735 mo
243.199 187.685 li
243.278 187.588 243.364 187.5 243.458 187.422 cv
243.361 187.735 li
.415686 0 0 rgb
f
172.113 124.734 mo
169.25 119.777 li
174.977 119.777 li
172.113 124.734 li
.47451 .47451 .47451 rgb
f
165.398 164.59 mo
162.535 159.629 li
168.262 159.629 li
167.925 160.213 li
167.362 160.53 166.944 161.113 166.916 161.961 cv
166.4 162.854 li
165.47 162.566 li
165.156 163.582 li
165.855 163.798 li
165.398 164.59 li
.117647 .0823529 .0823529 rgb
f
165.855 163.798 mo
165.156 163.582 li
165.47 162.566 li
166.4 162.854 li
165.855 163.798 li
.0705882 0 0 rgb
f
166.916 161.961 mo
166.944 161.113 167.362 160.53 167.925 160.213 cv
166.916 161.961 li
.0745098 .0509804 .0509804 rgb
f
146.951 112.975 mo
146.943 112.961 li
146.974 112.961 li
146.967 112.966 146.959 112.971 146.951 112.975 cv
147.83 111.899 mo
146.33 111.899 li
145.076 109.725 li
145.076 109.194 li
146.164 109.477 li
147.547 109.842 li
147.793 110.175 147.945 110.609 147.945 111.145 cv
147.945 111.424 147.904 111.675 147.83 111.899 cv
.443137 .443137 .443137 rgb
f
146.974 112.961 mo
146.943 112.961 li
146.33 111.899 li
147.83 111.899 li
147.67 112.379 147.358 112.734 146.974 112.961 cv
.435294 .435294 .435294 rgb
f
145.076 109.725 mo
144.802 109.252 li
144.862 109.222 144.924 109.195 144.986 109.171 cv
145.076 109.194 li
145.076 109.725 li
.396078 .396078 .396078 rgb
f
147.547 109.842 mo
146.164 109.477 li
145.076 109.194 li
144.986 109.171 li
145.25 109.069 145.535 109.018 145.82 109.018 cv
146.481 109.018 147.142 109.293 147.547 109.842 cv
.443137 .309804 .309804 rgb
f
143.707 110.888 mo
143.774 110.191 144.115 109.69 144.576 109.382 cv
143.707 110.888 li
.443137 .443137 .443137 rgb
f
145.82 113.269 mo
145.567 113.269 145.314 113.229 145.076 113.149 cv
145.076 112.961 li
146.943 112.961 li
146.951 112.975 li
146.61 113.171 146.215 113.269 145.82 113.269 cv
146.33 111.899 mo
145.076 111.899 li
145.076 109.725 li
146.33 111.899 li
144.65 111.899 mo
143.81 111.899 li
143.736 111.675 143.695 111.424 143.695 111.145 cv
143.695 111.056 143.699 110.971 143.707 110.888 cv
144.576 109.382 li
144.601 109.366 144.625 109.35 144.65 109.335 cv
144.65 111.899 li
.156863 .156863 .156863 rgb
f
146.943 112.961 mo
145.076 112.961 li
145.076 111.899 li
146.33 111.899 li
146.943 112.961 li
144.65 112.952 mo
144.273 112.724 143.967 112.373 143.81 111.899 cv
144.65 111.899 li
144.65 112.952 li
.152941 .152941 .152941 rgb
f
145.076 113.149 mo
144.927 113.099 144.784 113.033 144.65 112.952 cv
144.65 111.899 li
144.65 109.335 li
144.7 109.305 144.751 109.277 144.802 109.252 cv
145.076 109.725 li
145.076 111.899 li
145.076 112.961 li
145.076 113.149 li
.141176 .141176 .141176 rgb
f
221.103 171.199 mo
217.452 171.199 li
216.414 169.402 li
219.054 169.402 li
219.236 170.548 220.191 171.122 221.147 171.123 cv
221.103 171.199 li
.52549 .368627 .368627 rgb
f
157.274 97.6384 mo
157.234 97.633 li
154.473 97.2465 li
154.821 97.0368 155.23 96.932 155.639 96.932 cv
156.252 96.932 156.865 97.1675 157.274 97.6384 cv
.427451 .427451 .427451 rgb
f
155.639 101.186 mo
154.575 101.186 153.512 100.477 153.512 99.059 cv
153.512 98.1862 153.915 97.5821 154.473 97.2465 cv
157.234 97.633 li
157.274 97.6384 li
157.575 97.9847 157.766 98.4582 157.766 99.059 cv
157.766 100.477 156.702 101.186 155.639 101.186 cv
.427451 .298039 .298039 rgb
f
239.674 172.488 mo
236.428 172.488 li
236.121 172.141 235.926 171.663 235.926 171.055 cv
235.926 169.637 236.989 168.928 238.051 168.928 cv
239.113 168.928 240.176 169.637 240.176 171.055 cv
240.176 171.663 239.981 172.141 239.674 172.488 cv
.639216 .639216 .639216 rgb
f
247.5 213.445 mo
244.972 209.065 li
250.028 209.065 li
247.5 213.445 li
250.273 208.639 mo
244.727 208.639 li
244.637 208.484 li
250.363 208.484 li
250.273 208.639 li
.65098 .65098 .65098 rgb
f
250.028 209.065 mo
244.972 209.065 li
244.727 208.639 li
250.273 208.639 li
250.028 209.065 li
.584314 .584314 .584314 rgb
f
173.883 140.164 mo
173.373 139.281 li
174.393 139.281 li
173.883 140.164 li
174.433 139.211 mo
172.119 135.203 li
176.746 135.203 li
176.108 136.308 li
175.836 136.233 li
173.182 135.506 li
173.182 135.506 li
173.181 135.506 li
173.182 135.506 li
172.9 136.531 li
175.554 137.259 li
175.559 137.26 li
174.433 139.211 li
171.06 135.272 mo
171.02 135.203 li
171.099 135.203 li
171.06 135.272 li
.592157 .411765 .411765 rgb
f
175.559 137.26 mo
175.554 137.259 li
172.9 136.531 li
173.182 135.506 li
175.836 136.233 li
176.108 136.308 li
175.559 137.26 li
173.182 135.506 mo
173.181 135.506 li
173.182 135.506 li
173.182 135.506 li
.356863 0 0 rgb
f
174.393 139.281 mo
173.373 139.281 li
172.991 138.619 li
172.997 138.547 173 138.473 173 138.398 cv
173 137.37 172.441 136.714 171.729 136.432 cv
171.06 135.272 li
171.099 135.203 li
172.119 135.203 li
174.433 139.211 li
174.393 139.281 li
.262745 .184314 .184314 rgb
f
186.768 125.353 mo
185.704 125.353 184.641 124.645 184.641 123.227 cv
184.641 121.811 185.704 121.103 186.768 121.103 cv
186.813 121.103 186.859 121.104 186.904 121.107 cv
187.938 121.419 li
188.139 121.541 188.32 121.697 188.468 121.888 cv
188.468 124.568 li
188.444 124.599 188.418 124.63 188.392 124.66 cv
187.746 124.66 li
187.957 125.025 li
187.603 125.244 187.186 125.353 186.768 125.353 cv
.4 .4 .4 rgb
f
188.468 124.568 mo
188.468 121.888 li
188.731 122.225 188.895 122.672 188.895 123.227 cv
188.895 123.783 188.731 124.23 188.468 124.568 cv
.392157 .392157 .392157 rgb
f
187.938 121.419 mo
186.904 121.107 li
187.269 121.128 187.628 121.232 187.938 121.419 cv
.4 .278431 .278431 rgb
f
167.848 55.416 mo
166.785 55.416 165.723 54.707 165.723 53.289 cv
165.723 51.871 166.785 51.162 167.848 51.162 cv
168.91 51.162 169.973 51.871 169.973 53.289 cv
169.973 54.707 168.91 55.416 167.848 55.416 cv
.74902 .74902 .74902 rgb
f
235.982 204.549 mo
234.919 204.549 233.855 203.84 233.855 202.422 cv
233.855 201.006 234.919 200.298 235.982 200.298 cv
237.046 200.298 238.109 201.006 238.109 202.422 cv
238.109 203.84 237.046 204.549 235.982 204.549 cv
.494118 .494118 .494118 rgb
f
167.773 99.0216 mo
165.535 98.734 li
163.924 98.5249 li
163.129 97.148 li
168.855 97.148 li
167.773 99.0216 li
.654902 .654902 .654902 rgb
f
165.992 102.105 mo
163.924 98.5249 li
165.535 98.734 li
167.773 99.0216 li
165.992 102.105 li
.654902 .458824 .458824 rgb
f
206.174 160.065 mo
205.111 160.065 204.047 159.357 204.047 157.941 cv
204.047 156.523 205.111 155.814 206.174 155.814 cv
207.238 155.814 208.301 156.523 208.301 157.941 cv
208.301 159.357 207.238 160.065 206.174 160.065 cv
.305882 .305882 .305882 rgb
f
240.249 174.193 mo
238.273 173.734 li
235.911 173.186 li
235.508 172.488 li
236.428 172.488 li
236.837 172.951 237.444 173.182 238.051 173.182 cv
238.658 173.182 239.265 172.951 239.674 172.488 cv
241.234 172.488 li
240.249 174.193 li
.556863 .556863 .556863 rgb
f
240.196 174.285 mo
236.546 174.285 li
235.911 173.186 li
238.273 173.734 li
240.249 174.193 li
240.196 174.285 li
.556863 .388235 .388235 rgb
f
238.051 173.182 mo
237.444 173.182 236.837 172.951 236.428 172.488 cv
239.674 172.488 li
239.265 172.951 238.658 173.182 238.051 173.182 cv
.356863 .356863 .356863 rgb
f
237.543 179.246 mo
234.68 174.285 li
236.546 174.285 li
238.371 177.445 li
240.196 174.285 li
240.406 174.285 li
237.543 179.246 li
.207843 .145098 .145098 rgb
f
238.371 177.445 mo
236.546 174.285 li
240.196 174.285 li
238.371 177.445 li
.117647 .0823529 .0823529 rgb
f
189.219 119.996 mo
183.492 119.996 li
183.79 119.48 li
188.921 119.48 li
189.219 119.996 li
.705882 .494118 .494118 rgb
f
188.921 119.48 mo
183.79 119.48 li
185.422 116.652 li
187.288 116.652 li
188.921 119.48 li
.376471 .262745 .262745 rgb
f
187.288 116.652 mo
185.422 116.652 li
186.355 115.035 li
187.288 116.652 li
.0901961 .0627451 .0627451 rgb
f
199.059 150.449 mo
198.95 150.261 li
199.133 150.321 li
199.059 150.449 li
.654902 .654902 .654902 rgb
f
199.133 150.321 mo
198.95 150.261 li
196.195 145.488 li
201.018 145.488 li
200 147.25 li
200.905 147.25 li
199.133 150.321 li
.654902 .458824 .458824 rgb
f
200.905 147.25 mo
200 147.25 li
201.018 145.488 li
201.922 145.488 li
200.905 147.25 li
.443137 .309804 .309804 rgb
f
270.394 181.118 mo
269.23 180.852 li
266.241 180.17 li
266.514 179.19 267.398 178.7 268.283 178.7 cv
269.346 178.7 270.41 179.408 270.41 180.824 cv
270.41 180.926 270.405 181.024 270.394 181.118 cv
.560784 .560784 .560784 rgb
f
268.283 182.951 mo
267.22 182.951 266.156 182.242 266.156 180.824 cv
266.156 180.586 266.186 180.368 266.241 180.17 cv
269.23 180.852 li
270.394 181.118 li
270.258 182.34 269.27 182.951 268.283 182.951 cv
.560784 .392157 .392157 rgb
f
230.557 133.326 mo
229.493 133.326 228.43 132.617 228.43 131.199 cv
228.43 129.781 229.493 129.072 230.557 129.072 cv
231.621 129.072 232.684 129.781 232.684 131.199 cv
232.684 132.617 231.621 133.326 230.557 133.326 cv
.666667 .466667 .466667 rgb
f
191.84 127.488 mo
189.531 127.488 li
189.531 124.66 li
193.473 124.66 li
191.84 127.488 li
188.468 125.912 mo
187.957 125.025 li
188.117 124.926 188.264 124.804 188.392 124.66 cv
188.468 124.66 li
188.468 125.912 li
.384314 .384314 .384314 rgb
f
189.531 127.488 mo
189.378 127.488 li
188.468 125.912 li
188.468 124.66 li
189.531 124.66 li
189.531 127.488 li
.376471 .376471 .376471 rgb
f
190.609 129.621 mo
189.531 127.754 li
189.531 127.488 li
191.84 127.488 li
190.609 129.621 li
.258824 .258824 .258824 rgb
f
189.531 127.754 mo
189.378 127.488 li
189.531 127.488 li
189.531 127.754 li
.254902 .254902 .254902 rgb
f
187.957 125.025 mo
187.746 124.66 li
188.392 124.66 li
188.264 124.804 188.117 124.926 187.957 125.025 cv
.152941 .152941 .152941 rgb
f
163.262 105.598 mo
162.489 105.598 li
160.112 105.105 li
158.065 104.68 li
160.398 100.637 li
163.262 105.598 li
.666667 .466667 .466667 rgb
f
162.489 105.598 mo
157.535 105.598 li
158.065 104.68 li
160.112 105.105 li
162.489 105.598 li
.4 0 0 rgb
f
66.8971 125.468 mo
66.7533 125.415 li
66.565 125.089 li
66.6926 124.926 66.7971 124.738 66.8712 124.524 cv
67.0442 124.564 67.222 124.584 67.4 124.584 cv
67.4025 124.584 67.405 124.584 67.4074 124.584 cv
66.8971 125.468 li
.341176 .341176 .341176 rgb
f
65.8359 127.305 mo
65.3378 126.442 li
65.4964 126.168 li
66.4926 126.168 li
65.8359 127.305 li
66.8403 125.566 mo
66.7533 125.415 li
66.8971 125.468 li
66.8403 125.566 li
.341176 .239216 .239216 rgb
f
63.0774 122.529 mo
62.9729 122.348 li
63.2114 122.348 li
63.1637 122.405 63.1189 122.465 63.0774 122.529 cv
.341176 .341176 .341176 rgb
f
65.3378 126.442 mo
65.1792 126.168 li
65.4964 126.168 li
65.3378 126.442 li
.0705882 .0470588 .0470588 rgb
f
69.5271 122.457 mo
69.5271 125.293 65.273 125.293 65.273 122.457 cv
65.273 119.621 69.5271 119.621 69.5271 122.457 cv
0 0 0 rgb
f
64.2549 76.9024 mo
63.3187 76.626 li
63.7071 75.953 li
64.2549 76.9024 li
.521569 .521569 .521569 rgb
f
65.3974 80.914 mo
60.8441 80.914 li
63.3187 76.626 li
64.2549 76.9024 li
65.9837 79.8981 li
65.3974 80.914 li
.521569 .364706 .364706 rgb
f
70.4102 53.3979 mo
64.6839 53.3979 li
67.4092 48.6795 li
67.6847 48.6795 li
70.4102 53.3979 li
.478431 .478431 .478431 rgb
f
67.6847 48.6795 mo
67.4092 48.6795 li
67.5469 48.441 li
67.6847 48.6795 li
.470588 .470588 .470588 rgb
f
66.0898 70.113 mo
64.7158 70.113 li
65.4031 68.923 li
66.0898 70.113 li
61.6202 70.113 mo
60.3629 70.113 li
60.9914 69.0244 li
61.6202 70.113 li
.396078 .396078 .396078 rgb
f
64.7158 70.113 mo
61.6202 70.113 li
60.9914 69.0244 li
61.2538 68.57 li
65.1994 68.57 li
65.4031 68.923 li
64.7158 70.113 li
.231373 .231373 .231373 rgb
f
147.348 96.2058 mo
146.629 96.0972 li
146.731 95.8517 146.791 95.5696 146.797 95.2505 cv
147.348 96.2058 li
.643137 .643137 .643137 rgb
f
148.168 97.625 mo
142.441 97.625 li
143.026 96.6118 li
143.436 97.0886 144.053 97.327 144.67 97.327 cv
145.479 97.327 146.288 96.917 146.629 96.0972 cv
147.348 96.2058 li
148.168 97.625 li
.643137 .447059 .447059 rgb
f
145.67 93.3006 mo
145.483 93.2098 145.282 93.1464 145.076 93.1107 cv
145.076 93.0652 li
145.305 92.668 li
145.67 93.3006 li
.643137 .643137 .643137 rgb
f
145.076 93.1107 mo
145.068 93.1093 145.06 93.108 145.052 93.1067 cv
145.076 93.0652 li
145.076 93.1107 li
.576471 .576471 .576471 rgb
f
146.629 96.0972 mo
146.164 96.0271 li
145.076 95.8582 li
145.076 93.1107 li
145.282 93.1464 145.483 93.2098 145.67 93.3006 cv
146.797 95.2505 li
146.791 95.5696 146.731 95.8517 146.629 96.0972 cv
144.65 95.7923 mo
143.595 95.6285 li
144.65 93.801 li
144.65 95.7923 li
.133333 .133333 .133333 rgb
f
145.076 95.8582 mo
144.65 95.7923 li
144.65 93.801 li
145.052 93.1067 li
145.06 93.108 145.068 93.1093 145.076 93.1107 cv
145.076 95.8582 li
.121569 .121569 .121569 rgb
f
144.67 97.327 mo
144.053 97.327 143.436 97.0886 143.026 96.6118 cv
143.595 95.6285 li
144.65 95.7923 li
145.076 95.8582 li
146.164 96.0271 li
146.629 96.0972 li
146.288 96.917 145.479 97.327 144.67 97.327 cv
.133333 .0941176 .0941176 rgb
f
72.102 84.254 mo
70.1991 84.254 li
69.2659 82.637 li
68.4664 84.022 li
67.4881 82.3267 li
69.2379 79.297 li
69.8458 80.3492 li
69.5199 80.914 li
70.1722 80.914 li
72.102 84.254 li
.627451 .439216 .439216 rgb
f
152.438 124.367 mo
150.781 124.367 li
153.645 119.406 li
154.474 120.842 li
152.438 124.367 li
.239216 .239216 .239216 rgb
f
156.508 124.367 mo
152.438 124.367 li
154.474 120.842 li
156.508 124.367 li
.164706 .164706 .164706 rgb
f
81.4287 73.7149 mo
77.227 73.7149 li
80.0898 68.7541 li
82.1894 72.3972 li
81.4287 73.7149 li
.278431 .278431 .278431 rgb
f
82.9488 73.7149 mo
81.4287 73.7149 li
82.1894 72.3972 li
82.9488 73.7149 li
.0392157 .0392157 .0392157 rgb
f
89.7407 117.977 mo
88.4698 117.977 li
86.2421 114.117 li
86.6633 114.117 li
87.4488 115.477 li
88.2344 114.117 li
91.1431 114.117 li
91.8562 114.312 li
89.7407 117.977 li
.631373 .439216 .439216 rgb
f
91.8562 114.312 mo
91.1431 114.117 li
91.9691 114.117 li
91.8562 114.312 li
.380392 0 0 rgb
f
105.535 107.652 mo
101.261 107.652 li
101.261 105.137 li
102.672 102.695 li
105.535 107.652 li
100.198 107.652 mo
99.809 107.652 li
100.198 106.978 li
100.198 107.652 li
.105882 .105882 .105882 rgb
f
101.261 107.652 mo
100.198 107.652 li
100.198 106.978 li
101.261 105.137 li
101.261 107.652 li
.101961 .101961 .101961 rgb
f
129.13 111.899 mo
126.71 111.899 li
126.175 111.558 125.793 110.963 125.793 110.113 cv
125.793 108.697 126.857 107.989 127.92 107.989 cv
128.984 107.989 130.047 108.697 130.047 110.113 cv
130.047 110.963 129.665 111.558 129.13 111.899 cv
.643137 .643137 .643137 rgb
f
127.92 112.24 mo
127.494 112.24 127.068 112.126 126.71 111.899 cv
129.13 111.899 li
128.772 112.126 128.346 112.24 127.92 112.24 cv
.631373 .631373 .631373 rgb
f
98.0352 73.969 mo
92.309 73.969 li
95.1719 69.012 li
98.0352 73.969 li
.352941 .352941 .352941 rgb
f
175.52 88.113 mo
169.793 88.113 li
170.832 86.312 li
173.43 86.312 li
172.131 84.0621 li
172.656 83.152 li
175.52 88.113 li
.392157 .392157 .392157 rgb
f
173.43 86.312 mo
170.832 86.312 li
172.131 84.0621 li
173.43 86.312 li
.164706 .164706 .164706 rgb
f
72.168 102.18 mo
75.031 107.141 li
69.3051 107.141 li
72.168 102.18 li
0 0 0 rgb
f
68.0346 84.77 mo
63.1719 84.77 li
65.3974 80.914 li
66.5699 80.914 li
65.9837 79.8981 li
66.0351 79.809 li
67.4881 82.3267 li
66.375 84.254 li
68.3325 84.254 li
68.0346 84.77 li
.47451 .329412 .329412 rgb
f
66.5699 80.914 mo
65.3974 80.914 li
65.9837 79.8981 li
66.5699 80.914 li
.247059 .172549 .172549 rgb
f
68.3325 84.254 mo
66.375 84.254 li
67.4881 82.3267 li
68.4664 84.022 li
68.3325 84.254 li
.298039 .207843 .207843 rgb
f
70.5452 87.598 mo
66.402 87.598 li
66.845 86.8305 li
68.5721 87.1884 li
70.5452 87.598 li
71.6327 86.7382 mo
71.5529 86.7217 li
68.7879 86.1476 li
67.4048 85.861 li
68.0346 84.77 li
68.898 84.77 li
68.6003 84.254 li
70.1991 84.254 li
71.6327 86.7382 li
.270588 .188235 .188235 rgb
f
72.1289 87.598 mo
70.5452 87.598 li
68.5721 87.1884 li
66.845 86.8305 li
67.4048 85.861 li
68.7879 86.1476 li
71.5529 86.7217 li
71.6327 86.7382 li
72.1289 87.598 li
.160784 0 0 rgb
f
70.1991 84.254 mo
68.6003 84.254 li
68.4664 84.022 li
69.2659 82.637 li
70.1991 84.254 li
.168627 .117647 .117647 rgb
f
68.898 84.77 mo
68.0346 84.77 li
68.3325 84.254 li
68.6003 84.254 li
68.898 84.77 li
.129412 .0901961 .0901961 rgb
f
68.6003 84.254 mo
68.3325 84.254 li
68.4664 84.022 li
68.6003 84.254 li
.0823529 .054902 .054902 rgb
f
123.184 129.621 mo
121.934 127.455 li
123.141 127.762 li
124.112 128.012 li
123.184 129.621 li
.54902 .54902 .54902 rgb
f
124.112 128.012 mo
123.141 127.762 li
121.934 127.455 li
120.32 124.66 li
120.881 124.66 li
120.88 124.696 120.879 124.733 120.879 124.77 cv
120.879 126.187 121.943 126.896 123.006 126.896 cv
124.07 126.896 125.133 126.187 125.133 124.77 cv
125.133 124.733 125.132 124.696 125.131 124.66 cv
126.047 124.66 li
124.112 128.012 li
.54902 .384314 .384314 rgb
f
123.006 126.896 mo
121.943 126.896 120.879 126.187 120.879 124.77 cv
120.879 124.733 120.88 124.696 120.881 124.66 cv
125.131 124.66 li
125.132 124.696 125.133 124.733 125.133 124.77 cv
125.133 126.187 124.07 126.896 123.006 126.896 cv
.109804 .0784314 .0784314 rgb
f
66.582 104.457 mo
66.582 107.293 62.3282 107.293 62.3282 104.457 cv
62.3282 101.625 66.582 101.625 66.582 104.457 cv
0 0 0 rgb
f
84.1775 82.5936 mo
82.9405 82.2536 li
83.4608 81.352 li
84.1775 82.5936 li
.737255 .737255 .737255 rgb
f
86.3238 86.312 mo
80.598 86.312 li
82.9405 82.2536 li
84.1775 82.5936 li
86.3238 86.312 li
.737255 .513725 .513725 rgb
f
65.5941 88.773 mo
65.5941 91.609 61.3441 91.609 61.3441 88.773 cv
61.3441 85.938 65.5941 85.938 65.5941 88.773 cv
0 0 0 rgb
f
65.8359 133.839 mo
65.4355 133.839 65.0352 133.739 64.6917 133.538 cv
64.77 133.402 li
64.4891 133.402 li
64.1479 133.142 63.8856 132.767 63.7722 132.276 cv
64.604 132.533 li
64.897 131.586 li
65.3525 132.375 li
65.1289 132.375 li
65.9723 133.835 li
65.9269 133.838 65.8814 133.839 65.8359 133.839 cv
63.7127 131.817 mo
63.7115 131.783 63.7109 131.749 63.7109 131.715 cv
63.7109 131.536 63.7278 131.369 63.7595 131.212 cv
63.9922 131.073 64.1981 130.887 64.3592 130.654 cv
64.8445 131.495 li
63.9026 131.203 li
63.7127 131.817 li
67.2251 130.059 mo
64.6361 130.059 li
64.6506 130.007 64.6634 129.955 64.6744 129.9 cv
65.0218 129.692 65.4287 129.588 65.8359 129.588 cv
66.3359 129.588 66.8359 129.745 67.2251 130.059 cv
.396078 .278431 .278431 rgb
f
64.604 132.533 mo
63.7722 132.276 li
63.7391 132.133 63.7187 131.98 63.7127 131.817 cv
63.9026 131.203 li
64.8445 131.495 li
64.897 131.586 li
64.604 132.533 li
.239216 0 0 rgb
f
64.6917 133.538 mo
64.6217 133.497 64.5539 133.451 64.4891 133.402 cv
64.77 133.402 li
64.6917 133.538 li
.0588235 .0392157 .0392157 rgb
f
66.4534 132.375 mo
65.3525 132.375 li
64.897 131.586 li
64.8445 131.495 li
64.3592 130.654 li
64.4786 130.481 64.5733 130.283 64.6361 130.059 cv
67.2251 130.059 li
67.399 130.199 67.5509 130.371 67.6707 130.574 cv
65.4141 130.574 li
66.4534 132.375 li
0 0 0 rgb
f
65.9723 133.835 mo
65.1289 132.375 li
65.3525 132.375 li
66.4534 132.375 li
67.086 133.471 li
66.7579 133.691 66.3683 133.813 65.9723 133.835 cv
f
63.7595 131.212 mo
63.8828 130.604 64.2297 130.167 64.6744 129.9 cv
64.6634 129.955 64.6506 130.007 64.6361 130.059 cv
64.5733 130.283 64.4786 130.481 64.3592 130.654 cv
64.1981 130.887 63.9922 131.073 63.7595 131.212 cv
f
67.086 133.471 mo
66.4534 132.375 li
65.4141 130.574 li
67.6707 130.574 li
67.8527 130.882 67.9609 131.262 67.9609 131.715 cv
67.9609 132.542 67.5987 133.127 67.086 133.471 cv
f
74.6776 79.9291 mo
74.2148 79.797 li
71.4449 79 li
70.7419 78.7964 li
72.3828 75.953 li
74.6776 79.9291 li
.596078 .596078 .596078 rgb
f
75.246 80.914 mo
70.1722 80.914 li
69.8458 80.3492 li
70.7419 78.7964 li
71.4449 79 li
74.2148 79.797 li
74.6776 79.9291 li
75.246 80.914 li
.596078 .415686 .415686 rgb
f
70.1722 80.914 mo
69.5199 80.914 li
69.8458 80.3492 li
70.1722 80.914 li
.372549 .262745 .262745 rgb
f
84.4831 129.709 mo
84.0834 129.114 83.3942 128.817 82.705 128.817 cv
82.6135 128.817 82.5219 128.822 82.4311 128.833 cv
82.2138 128.509 82.0819 128.098 82.0819 127.598 cv
82.0819 126.182 83.1445 125.474 84.207 125.474 cv
85.2695 125.474 86.332 126.182 86.332 127.598 cv
86.332 128.606 85.7952 129.255 85.1032 129.547 cv
84.398 129.547 li
84.491 129.708 li
84.4884 129.708 84.4857 129.709 84.4831 129.709 cv
.368627 .368627 .368627 rgb
f
84.207 129.725 mo
83.5188 129.725 82.8306 129.428 82.4311 128.833 cv
82.5219 128.822 82.6135 128.817 82.705 128.817 cv
83.3942 128.817 84.0834 129.114 84.4831 129.709 cv
84.3915 129.72 84.2993 129.725 84.207 129.725 cv
0 0 0 rgb
f
84.491 129.708 mo
84.398 129.547 li
85.1032 129.547 li
84.9086 129.629 84.7018 129.683 84.491 129.708 cv
f
143.344 140.309 mo
137.617 140.309 li
140.48 135.352 li
143.344 140.309 li
.6 .6 .6 rgb
f
83.953 51.602 mo
78.227 51.602 li
79.9135 48.6795 li
82.2663 48.6795 li
83.953 51.602 li
81.6528 47.6164 mo
80.5269 47.6164 li
81.0898 46.641 li
81.6528 47.6164 li
.603922 .603922 .603922 rgb
f
82.2663 48.6795 mo
79.9135 48.6795 li
80.5269 47.6164 li
81.6528 47.6164 li
82.2663 48.6795 li
.592157 .592157 .592157 rgb
f
63.6129 141.961 mo
66.477 137.004 li
60.75 137.004 li
cp
0 0 0 rgb
f
65.7874 98.7602 mo
64.4058 98.301 li
63.2364 97.9098 li
63.8451 96.8551 li
65.4488 96.8551 li
65.1837 96.3957 li
65.6082 96.7497 65.8949 97.2949 65.8949 98.031 cv
65.8949 98.2995 65.8566 98.5426 65.7874 98.7602 cv
.321569 .321569 .321569 rgb
f
63.768 100.155 mo
62.7045 100.155 61.641 99.447 61.641 98.031 cv
61.641 97.832 61.662 97.647 61.701 97.4759 cv
62.5941 99.0229 li
63.2364 97.9098 li
64.4058 98.301 li
65.7874 98.7602 li
65.4916 99.6902 64.6298 100.155 63.768 100.155 cv
.321569 .223529 .223529 rgb
f
63.2364 97.9098 mo
61.7191 97.4022 li
61.7727 97.1992 61.8523 97.0168 61.9526 96.8551 cv
63.8451 96.8551 li
63.2364 97.9098 li
.207843 .207843 .207843 rgb
f
62.5941 99.0229 mo
61.701 97.4759 li
61.7066 97.451 61.7127 97.4264 61.7191 97.4022 cv
63.2364 97.9098 li
62.5941 99.0229 li
.207843 .145098 .145098 rgb
f
179.246 213.188 mo
176.866 209.065 li
181.626 209.065 li
179.246 213.188 li
181.871 208.639 mo
176.621 208.639 li
176.383 208.227 li
182.109 208.227 li
181.871 208.639 li
.486274 .486274 .486274 rgb
f
181.626 209.065 mo
176.866 209.065 li
176.621 208.639 li
181.871 208.639 li
181.626 209.065 li
.435294 .435294 .435294 rgb
f
183.551 245.586 mo
181.207 241.524 li
185.895 241.524 li
183.551 245.586 li
.301961 .301961 .301961 rgb
f
185.895 241.524 mo
181.207 241.524 li
180.688 240.625 li
186.414 240.625 li
185.895 241.524 li
.294118 .294118 .294118 rgb
f
222.967 170.17 mo
222.793 170.129 li
221.849 169.907 li
222.141 169.402 li
219.699 169.402 li
219.034 169.245 li
219.027 169.165 219.023 169.082 219.023 168.996 cv
219.023 167.58 220.086 166.872 221.15 166.872 cv
222.213 166.872 223.277 167.58 223.277 168.996 cv
223.277 169.465 223.161 169.856 222.967 170.17 cv
.631373 .631373 .631373 rgb
f
221.15 171.123 mo
221.149 171.123 221.148 171.123 221.147 171.123 cv
221.849 169.907 li
222.793 170.129 li
222.967 170.17 li
222.574 170.805 221.862 171.123 221.15 171.123 cv
219.699 169.402 mo
219.054 169.402 li
219.046 169.351 219.039 169.299 219.034 169.245 cv
219.699 169.402 li
.631373 .439216 .439216 rgb
f
221.849 169.907 mo
219.699 169.402 li
222.141 169.402 li
221.849 169.907 li
.333333 .333333 .333333 rgb
f
221.147 171.123 mo
220.191 171.122 219.236 170.548 219.054 169.402 cv
219.699 169.402 li
221.849 169.907 li
221.147 171.123 li
.333333 .231373 .231373 rgb
f
181.172 222.188 mo
178.309 217.227 li
184.035 217.227 li
181.172 222.188 li
.0156863 .0156863 .0156863 rgb
f
215.766 158.78 mo
214.703 158.78 213.641 158.072 213.641 156.656 cv
213.641 156.078 213.817 155.619 214.098 155.276 cv
215.883 155.871 li
217.889 156.545 li
217.89 156.582 217.891 156.619 217.891 156.656 cv
217.891 158.072 216.828 158.78 215.766 158.78 cv
.694118 .694118 .694118 rgb
f
217.889 156.545 mo
215.883 155.871 li
214.098 155.276 li
214.507 154.778 215.136 154.529 215.766 154.529 cv
216.8 154.529 217.835 155.201 217.889 156.545 cv
.694118 .486274 .486274 rgb
f
183.012 173.694 mo
181.949 173.694 180.887 172.986 180.887 171.57 cv
180.887 170.152 181.949 169.443 183.012 169.443 cv
184.074 169.443 185.137 170.152 185.137 171.57 cv
185.137 172.986 184.074 173.694 183.012 173.694 cv
.721569 .501961 .501961 rgb
f
221.461 183.875 mo
219.111 179.802 li
219.299 179.191 li
218.641 178.988 li
218.598 178.914 li
224.324 178.914 li
223.271 180.738 li
223.361 180.447 li
222.95 180.32 li
222.346 180.133 li
222.032 181.149 li
222.637 181.336 li
222.883 181.412 li
221.461 183.875 li
.533333 .372549 .372549 rgb
f
222.883 181.412 mo
222.637 181.336 li
222.032 181.149 li
222.346 180.133 li
222.95 180.32 li
223.361 180.447 li
223.271 180.738 li
222.883 181.412 li
219.111 179.802 mo
218.641 178.988 li
219.299 179.191 li
219.111 179.802 li
.321569 0 0 rgb
f
178.414 196.988 mo
181.277 192.027 li
175.551 192.027 li
178.414 196.988 li
0 0 0 rgb
f
231.891 217.559 mo
229.027 212.598 li
232.924 212.598 li
232.924 215.768 li
231.891 217.559 li
233.35 215.031 mo
233.35 212.598 li
234.754 212.598 li
233.35 215.031 li
.611765 .611765 .611765 rgb
f
232.924 215.768 mo
232.924 212.598 li
233.35 212.598 li
233.35 215.031 li
232.924 215.768 li
.54902 .54902 .54902 rgb
f
220.258 176.16 mo
217.395 171.199 li
217.452 171.199 li
219.277 174.359 li
221.103 171.199 li
223.121 171.199 li
220.258 176.16 li
.647059 .45098 .45098 rgb
f
219.277 174.359 mo
217.452 171.199 li
221.103 171.199 li
219.277 174.359 li
.341176 .239216 .239216 rgb
f
247.785 227.844 mo
244.922 222.883 li
250.648 222.883 li
247.785 227.844 li
.560784 .560784 .560784 rgb
f
188.23 176.934 mo
185.367 171.973 li
191.094 171.973 li
188.23 176.934 li
.494118 .345098 .345098 rgb
f
209.285 154.409 mo
208.42 154.409 207.555 153.94 207.263 153.002 cv
209.699 153.809 li
210.487 154.072 li
210.131 154.297 209.708 154.409 209.285 154.409 cv
.592157 .592157 .592157 rgb
f
210.487 154.072 mo
209.699 153.809 li
207.263 153.002 li
207.197 152.787 207.16 152.548 207.16 152.285 cv
207.16 150.867 208.222 150.158 209.285 150.158 cv
210.347 150.158 211.41 150.867 211.41 152.285 cv
211.41 153.137 211.025 153.733 210.487 154.072 cv
.592157 .411765 .411765 rgb
f
186.672 232.727 mo
189.535 227.77 li
183.809 227.77 li
cp
0 0 0 rgb
f
226.25 195.961 mo
223.943 191.964 li
225.891 192.711 li
227.719 193.415 li
226.25 195.961 li
.682353 .682353 .682353 rgb
f
227.719 193.415 mo
225.891 192.711 li
223.943 191.964 li
223.387 191 li
229.113 191 li
227.719 193.415 li
.682353 .47451 .47451 rgb
f
145.27 193.902 mo
145.076 193.565 li
145.076 188.941 li
148.133 188.941 li
145.27 193.902 li
144.65 192.829 mo
142.406 188.941 li
144.65 188.941 li
144.65 192.829 li
.305882 .305882 .305882 rgb
f
145.076 193.565 mo
144.65 192.829 li
144.65 188.941 li
145.076 188.941 li
145.076 193.565 li
.27451 .27451 .27451 rgb
f
179.864 192.027 mo
178.292 192.027 li
176.215 188.43 li
181.941 188.43 li
179.864 192.027 li
.0784314 .0784314 .0784314 rgb
f
179.078 193.387 mo
178.292 192.027 li
179.864 192.027 li
179.078 193.387 li
0 0 0 rgb
f
89.2852 156.875 mo
86.4219 151.918 li
92.148 151.918 li
89.2852 156.875 li
.670588 .670588 .670588 rgb
f
92.2809 103.027 mo
86.5551 103.027 li
89.4181 98.066 li
92.2809 103.027 li
.631373 .631373 .631373 rgb
f
71.4141 108.385 mo
71.0826 108.385 70.7511 108.316 70.4518 108.178 cv
70.6651 107.401 li
69.7191 107.141 li
73.3765 107.141 li
73.0392 107.97 72.2267 108.385 71.4141 108.385 cv
.180392 .12549 .12549 rgb
f
70.4518 108.178 mo
70.0176 107.978 69.6514 107.632 69.4517 107.141 cv
69.7191 107.141 li
70.6651 107.401 li
70.4518 108.178 li
.109804 0 0 rgb
f
69.3953 106.985 mo
69.3269 106.768 69.2891 106.525 69.2891 106.258 cv
69.2891 106.018 69.3196 105.798 69.3755 105.598 cv
70.1955 105.598 li
69.3953 106.985 li
.180392 .12549 .12549 rgb
f
73.3765 107.141 mo
69.7191 107.141 li
69.4517 107.141 li
69.4311 107.09 69.4123 107.038 69.3953 106.985 cv
70.1955 105.598 li
72.2969 105.598 li
71.4505 104.131 li
72.5007 104.147 73.5391 104.856 73.5391 106.258 cv
73.5391 106.592 73.4803 106.886 73.3765 107.141 cv
0 0 0 rgb
f
99.0719 143.096 mo
98.3528 143.096 97.6337 142.772 97.2433 142.123 cv
97.4197 141.553 li
96.9833 141.418 li
96.9582 141.277 96.9449 141.128 96.9449 140.969 cv
96.9449 139.553 98.0084 138.845 99.0719 138.845 cv
100.135 138.845 101.199 139.553 101.199 140.969 cv
101.199 141.653 100.951 142.173 100.575 142.527 cv
100.466 142.493 li
100.414 142.663 li
100.032 142.952 99.5519 143.096 99.0719 143.096 cv
.384314 .266667 .266667 rgb
f
100.414 142.663 mo
100.466 142.493 li
100.575 142.527 li
100.524 142.575 100.47 142.621 100.414 142.663 cv
97.2433 142.123 mo
97.1209 141.92 97.0309 141.685 96.9833 141.418 cv
97.4197 141.553 li
97.2433 142.123 li
.231373 0 0 rgb
f
69.3755 105.598 mo
66.5699 105.598 li
69.434 100.637 li
71.2462 103.777 li
71.0235 104.163 li
70.2834 104.287 69.6087 104.765 69.3755 105.598 cv
.384314 .266667 .266667 rgb
f
71.0235 104.163 mo
71.2462 103.777 li
71.4505 104.131 li
71.4383 104.131 71.4263 104.131 71.4141 104.131 cv
71.2832 104.131 71.1524 104.142 71.0235 104.163 cv
0 0 0 rgb
f
70.1955 105.598 mo
69.3755 105.598 li
69.6087 104.765 70.2834 104.287 71.0235 104.163 cv
70.1955 105.598 li
.0705882 .0470588 .0470588 rgb
f
72.2969 105.598 mo
70.1955 105.598 li
71.0235 104.163 li
71.1524 104.142 71.2832 104.131 71.4141 104.131 cv
71.4263 104.131 71.4383 104.131 71.4505 104.131 cv
72.2969 105.598 li
0 0 0 rgb
f
64.3238 121.207 mo
67.1879 126.168 li
61.4609 126.168 li
64.3238 121.207 li
f
66.6719 68.57 mo
65.6069 68.57 li
66.0308 67.836 li
64.7758 67.836 li
63.227 65.152 li
61.6775 67.836 li
61.3687 67.836 li
63.8091 63.609 li
66.6719 68.57 li
.298039 .298039 .298039 rgb
f
65.6069 68.57 mo
65.1994 68.57 li
64.7758 67.836 li
66.0308 67.836 li
65.6069 68.57 li
61.2538 68.57 mo
60.945 68.57 li
61.3687 67.836 li
61.6775 67.836 li
61.2538 68.57 li
.172549 .172549 .172549 rgb
f
64.7758 67.836 mo
61.6775 67.836 li
63.227 65.152 li
64.7758 67.836 li
.117647 .117647 .117647 rgb
f
65.1994 68.57 mo
61.2538 68.57 li
61.6775 67.836 li
64.7758 67.836 li
65.1994 68.57 li
.0705882 .0705882 .0705882 rgb
f
88.568 140.525 mo
87.5045 140.525 86.441 139.816 86.441 138.398 cv
86.441 136.98 87.5045 136.271 88.568 136.271 cv
89.6315 136.271 90.6949 136.98 90.6949 138.398 cv
90.6949 139.816 89.6315 140.525 88.568 140.525 cv
88.2782 138.729 mo
87.9658 139.745 li
88.9817 140.057 li
89.2943 139.041 li
88.2782 138.729 li
.541176 .376471 .376471 rgb
f
88.9817 140.057 mo
87.9658 139.745 li
88.2782 138.729 li
89.2943 139.041 li
88.9817 140.057 li
.32549 0 0 rgb
f
69.9449 114.965 mo
68.1011 111.77 li
70.8749 111.77 li
69.8558 110.004 li
72.809 110.004 li
69.9449 114.965 li
.454902 .317647 .317647 rgb
f
70.8749 111.77 mo
68.1011 111.77 li
67.0819 110.004 li
69.8558 110.004 li
70.8749 111.77 li
.0980392 .0666667 .0666667 rgb
f
89.4569 122.934 mo
87.298 119.196 li
89.1371 119.609 li
91.1171 120.06 li
89.4569 122.934 li
.352941 .352941 .352941 rgb
f
91.1171 120.06 mo
89.1371 119.609 li
87.298 119.196 li
86.5941 117.977 li
88.4698 117.977 li
89.1051 119.078 li
89.7407 117.977 li
92.3199 117.977 li
91.1171 120.06 li
.352941 .247059 .247059 rgb
f
89.1051 119.078 mo
88.4698 117.977 li
89.7407 117.977 li
89.1051 119.078 li
.223529 .156863 .156863 rgb
f
65.223 15.086 mo
59.496 15.086 li
62.359 10.1291 li
65.223 15.086 li
.380392 .380392 .380392 rgb
f
64.5039 134.137 mo
64.3456 134.137 li
64.4247 134 li
64.5039 134.137 li
59.4672 134.137 mo
58.7769 134.137 li
59.1223 133.539 li
59.4672 134.137 li
64.0794 133.402 mo
59.2017 133.402 li
60.4465 131.247 li
60.542 131.277 li
60.6712 130.859 li
60.8095 130.619 li
61.208 131.223 61.902 131.525 62.596 131.525 cv
62.7239 131.525 62.8516 131.515 62.9776 131.494 cv
64.0794 133.402 li
.364706 .254902 .254902 rgb
f
60.542 131.277 mo
60.4465 131.247 li
60.6712 130.859 li
60.542 131.277 li
.219608 0 0 rgb
f
64.3456 134.137 mo
59.4672 134.137 li
59.1223 133.539 li
59.2017 133.402 li
64.0794 133.402 li
64.4247 134 li
64.3456 134.137 li
.0509804 .0352941 .0352941 rgb
f
62.596 131.525 mo
61.902 131.525 61.208 131.223 60.8095 130.619 cv
61.641 129.18 li
62.9776 131.494 li
62.8516 131.515 62.7239 131.525 62.596 131.525 cv
0 0 0 rgb
f
61.9969 107.91 mo
61.4046 107.91 li
62.3231 106.319 li
62.6196 106.832 li
61.9969 107.91 li
60.2001 105.633 mo
60.1855 105.633 li
60.1848 105.631 60.1843 105.63 60.1836 105.628 cv
60.2001 105.633 li
61.4955 104.886 mo
61.4524 104.874 li
61.4528 104.874 li
59.568 104.357 li
60.3789 102.953 li
61.4955 104.886 li
.588235 .411765 .411765 rgb
f
61.9269 105.633 mo
60.2001 105.633 li
60.1836 105.628 li
60.0132 105.212 59.7228 104.901 59.3732 104.694 cv
59.568 104.357 li
61.4528 104.874 li
61.4524 104.874 li
61.4955 104.886 li
61.9269 105.633 li
.352941 0 0 rgb
f
61.4046 107.91 mo
59.8793 107.91 li
60.1668 107.566 60.348 107.102 60.348 106.516 cv
60.348 106.182 60.2892 105.888 60.1855 105.633 cv
60.2001 105.633 li
61.9269 105.633 li
62.3231 106.319 li
61.4046 107.91 li
0 0 0 rgb
f
57.7357 107.53 mo
57.9113 107.226 li
58.0076 107.392 li
57.9138 107.432 57.8229 107.477 57.7357 107.53 cv
.2 .2 .2 rgb
f
60.1855 105.633 mo
58.8312 105.633 li
59.0185 105.309 li
60.1836 105.628 li
60.1843 105.63 60.1848 105.631 60.1855 105.633 cv
.2 .141176 .141176 rgb
f
60.1836 105.628 mo
59.0185 105.309 li
59.3732 104.694 li
59.7228 104.901 60.0132 105.212 60.1836 105.628 cv
.121569 0 0 rgb
f
58.3062 107.91 mo
57.516 107.91 li
57.7357 107.53 li
57.8229 107.477 57.9138 107.432 58.0076 107.392 cv
58.3062 107.91 li
0 0 0 rgb
f
59.8793 107.91 mo
58.3062 107.91 li
58.0076 107.392 li
57.9113 107.226 li
58.8312 105.633 li
60.1855 105.633 li
60.2892 105.888 60.348 106.182 60.348 106.516 cv
60.348 107.102 60.1668 107.566 59.8793 107.91 cv
f
66.996 123.742 mo
66.996 126.578 62.7422 126.578 62.7422 123.742 cv
62.7422 120.906 66.996 120.906 66.996 123.742 cv
f
65.7438 110.738 mo
60.5542 110.738 li
60.795 110.45 60.9612 110.077 61.0089 109.62 cv
61.9969 107.91 li
63.2422 107.91 li
62.6196 106.832 li
63.0446 106.097 li
63.2109 106.234 63.3981 106.343 63.5973 106.422 cv
65.9167 110.438 li
65.7438 110.738 li
.027451 .0196078 .0196078 rgb
f
66.0898 110.738 mo
65.7438 110.738 li
65.9167 110.438 li
66.0898 110.738 li
.00392157 .00392157 .00392157 rgb
f
60.5542 110.738 mo
60.3629 110.738 li
61.0089 109.62 li
60.9612 110.077 60.795 110.45 60.5542 110.738 cv
0 0 0 rgb
f
63.5973 106.422 mo
63.3981 106.343 63.2109 106.234 63.0446 106.097 cv
63.227 105.781 li
63.5973 106.422 li
f
63.2422 107.91 mo
61.9969 107.91 li
62.6196 106.832 li
63.2422 107.91 li
.0156863 .0117647 .0117647 rgb
f
112.785 137.439 mo
111.723 137.439 110.66 136.73 110.66 135.312 cv
110.66 133.896 111.723 133.188 112.785 133.188 cv
113.848 133.188 114.91 133.896 114.91 135.312 cv
114.91 136.73 113.848 137.439 112.785 137.439 cv
.537255 .537255 .537255 rgb
f
103.426 156.25 mo
101.261 156.25 li
101.261 152.504 li
103.426 156.25 li
100.198 156.25 mo
97.6988 156.25 li
100.198 151.922 li
100.198 156.25 li
.643137 .643137 .643137 rgb
f
101.261 156.25 mo
100.198 156.25 li
100.198 151.922 li
100.562 151.293 li
101.261 152.504 li
101.261 156.25 li
.631373 .631373 .631373 rgb
f
76.668 95.055 mo
75.1424 95.055 li
75.5538 94.8601 75.9022 94.5334 76.1026 94.0752 cv
76.668 95.055 li
73.178 95.055 mo
70.941 95.055 li
72.0352 93.1597 li
72.0401 94.1169 72.5313 94.7486 73.178 95.055 cv
73.1344 91.2557 mo
73.8051 90.094 li
74.3424 91.025 li
74.2818 91.0204 74.221 91.018 74.1602 91.018 cv
73.8051 91.018 73.4499 91.0973 73.1344 91.2557 cv
.376471 .262745 .262745 rgb
f
75.1424 95.055 mo
73.178 95.055 li
72.5313 94.7486 72.0401 94.1169 72.0352 93.1597 cv
73.1344 91.2557 li
73.4499 91.0973 73.8051 91.018 74.1602 91.018 cv
74.221 91.018 74.2818 91.0204 74.3424 91.025 cv
76.1026 94.0752 li
75.9022 94.5334 75.5538 94.8601 75.1424 95.055 cv
.027451 .0196078 .0196078 rgb
f
115.639 79.842 mo
115.299 79.842 114.96 79.7696 114.655 79.625 cv
116.623 79.625 li
116.318 79.7696 115.979 79.842 115.639 79.842 cv
114.497 79.5419 mo
113.927 79.2094 113.512 78.6004 113.512 77.715 cv
113.512 76.299 114.575 75.591 115.639 75.591 cv
115.988 75.591 116.336 75.667 116.647 75.8191 cv
114.497 79.5419 li
.74902 .74902 .74902 rgb
f
116.623 79.625 mo
114.655 79.625 li
114.601 79.5995 114.548 79.5719 114.497 79.5419 cv
116.647 75.8191 li
117.285 76.1311 117.766 76.7631 117.766 77.715 cv
117.766 78.6802 117.273 79.3168 116.623 79.625 cv
.47451 .47451 .47451 rgb
f
66.125 57.258 mo
60.398 57.258 li
63.2621 52.297 li
66.125 57.258 li
.454902 .454902 .454902 rgb
f
112.994 129.213 mo
111.93 129.213 110.867 128.504 110.867 127.086 cv
110.867 125.972 111.524 125.296 112.321 125.057 cv
113.867 125.434 li
114.579 125.61 li
114.909 125.961 115.121 126.453 115.121 127.086 cv
115.121 128.504 114.057 129.213 112.994 129.213 cv
.501961 .501961 .501961 rgb
f
114.579 125.61 mo
113.867 125.434 li
112.321 125.057 li
112.538 124.992 112.766 124.959 112.994 124.959 cv
113.582 124.959 114.171 125.176 114.579 125.61 cv
.501961 .34902 .34902 rgb
f
66.1596 92.996 mo
63.2214 92.996 li
62.5859 91.895 li
61.9505 92.996 li
60.484 92.996 li
62.0043 90.3647 li
62.4031 90.7215 62.9362 90.9 63.4691 90.9 cv
63.9313 90.9 64.3933 90.7659 64.768 90.4977 cv
66.1909 92.9615 li
66.1804 92.9728 66.1699 92.9843 66.1596 92.996 cv
.611765 .427451 .427451 rgb
f
63.4691 90.9 mo
62.9362 90.9 62.4031 90.7215 62.0043 90.3647 cv
63.348 88.039 li
64.768 90.4977 li
64.3933 90.7659 63.9313 90.9 63.4691 90.9 cv
0 0 0 rgb
f
133.906 104.566 mo
128.18 104.566 li
130.761 100.097 li
131.401 100.23 li
133.906 104.566 li
.72549 .505882 .505882 rgb
f
131.401 100.23 mo
130.761 100.097 li
131.043 99.609 li
131.401 100.23 li
.435294 0 0 rgb
f
68.3281 74.375 mo
68.3281 77.207 64.0738 77.207 64.0738 74.375 cv
64.0738 71.539 68.3281 71.539 68.3281 74.375 cv
0 0 0 rgb
f
67.7831 96.557 mo
66.8079 96.557 65.8327 95.9608 65.6773 94.7688 cv
65.9101 94.7971 li
68.6801 95.137 li
69.7633 95.273 li
69.4358 96.129 68.6095 96.557 67.7831 96.557 cv
.262745 .262745 .262745 rgb
f
69.7633 95.273 mo
68.6801 95.137 li
65.9101 94.7971 li
65.6773 94.7688 li
65.6632 94.6607 65.6559 94.5479 65.6559 94.43 cv
65.6559 93.8214 65.8518 93.3434 66.1596 92.996 cv
66.2109 92.996 li
66.1909 92.9615 li
66.5995 92.5225 67.1913 92.303 67.7831 92.303 cv
68.8467 92.303 69.9102 93.012 69.9102 94.43 cv
69.9102 94.7462 69.8573 95.0273 69.7633 95.273 cv
.262745 .184314 .184314 rgb
f
66.2109 92.996 mo
66.1596 92.996 li
66.1699 92.9843 66.1804 92.9728 66.1909 92.9615 cv
66.2109 92.996 li
.160784 .113725 .113725 rgb
f
68.3281 85.172 mo
68.3281 88.008 64.0781 88.008 64.0781 85.172 cv
64.0781 82.34 68.3281 82.34 68.3281 85.172 cv
0 0 0 rgb
f
112.988 90.867 mo
115.848 95.824 li
110.125 95.824 li
cp
f
123.012 115.883 mo
122.137 115.883 li
120.609 113.238 li
119.163 115.741 li
117.63 115.286 li
118.971 112.961 li
121.325 112.961 li
123.012 115.883 li
120.712 111.899 mo
119.584 111.899 li
120.148 110.922 li
120.712 111.899 li
.498039 .498039 .498039 rgb
f
121.325 112.961 mo
118.971 112.961 li
119.584 111.899 li
120.712 111.899 li
121.325 112.961 li
.490196 .490196 .490196 rgb
f
119.081 115.883 mo
117.285 115.883 li
117.63 115.286 li
119.163 115.741 li
119.081 115.883 li
.498039 .34902 .34902 rgb
f
122.137 115.883 mo
119.643 115.883 li
119.163 115.741 li
120.609 113.238 li
122.137 115.883 li
.12549 .12549 .12549 rgb
f
119.643 115.883 mo
119.081 115.883 li
119.163 115.741 li
119.643 115.883 li
.12549 .0862745 .0862745 rgb
f
61.3425 96.8551 mo
60.0867 96.8551 li
59.782 96.7528 li
60.5327 95.4522 li
61.3425 96.8551 li
65.1837 96.3957 mo
64.942 96.1941 64.6555 96.0546 64.3519 95.9769 cv
64.6469 95.4657 li
65.1837 96.3957 li
.0627451 .0627451 .0627451 rgb
f
60.0867 96.8551 mo
59.7229 96.8551 li
59.782 96.7528 li
60.0867 96.8551 li
.0627451 .0431373 .0431373 rgb
f
63.8367 94.062 mo
61.3352 94.062 li
61.9505 92.996 li
63.2214 92.996 li
63.8367 94.062 li
f
61.9526 96.8551 mo
61.3425 96.8551 li
60.5327 95.4522 li
61.2355 94.2346 li
63.1448 94.461 li
64.1366 94.5815 li
64.6469 95.4657 li
64.3519 95.9769 li
64.1617 95.9283 63.9649 95.904 63.768 95.904 cv
63.0568 95.904 62.3457 96.221 61.9526 96.8551 cv
.0392157 .0392157 .0392157 rgb
f
64.1366 94.5815 mo
63.1448 94.461 li
61.2355 94.2346 li
61.3352 94.062 li
63.8367 94.062 li
64.1366 94.5815 li
.0392157 .027451 .027451 rgb
f
65.4488 96.8551 mo
63.8451 96.8551 li
64.3519 95.9769 li
64.6555 96.0546 64.942 96.1941 65.1837 96.3957 cv
65.4488 96.8551 li
.0196078 .0196078 .0196078 rgb
f
63.8451 96.8551 mo
61.9526 96.8551 li
62.3457 96.221 63.0568 95.904 63.768 95.904 cv
63.9649 95.904 64.1617 95.9283 64.3519 95.9769 cv
63.8451 96.8551 li
.0117647 .0117647 .0117647 rgb
f
63.2214 92.996 mo
61.9505 92.996 li
62.5859 91.895 li
63.2214 92.996 li
.0392157 .027451 .027451 rgb
f
82.5391 147.875 mo
80.7531 144.783 li
84.3251 144.783 li
82.5391 147.875 li
84.0399 144.357 mo
80.5075 144.357 li
79.8684 143.251 li
80.3871 143.387 li
83.48 144.207 li
84.0399 144.357 li
.427451 .427451 .427451 rgb
f
84.3251 144.783 mo
80.7531 144.783 li
80.5075 144.357 li
84.0399 144.357 li
84.4994 144.481 li
84.3251 144.783 li
.384314 .384314 .384314 rgb
f
84.4994 144.481 mo
84.0399 144.357 li
83.48 144.207 li
80.3871 143.387 li
79.8684 143.251 li
79.6762 142.918 li
85.402 142.918 li
84.4994 144.481 li
.427451 .298039 .298039 rgb
f
65.0719 121.24 mo
64.0084 121.24 62.9449 120.531 62.9449 119.113 cv
62.9449 117.697 64.0084 116.989 65.0719 116.989 cv
66.1353 116.989 67.1988 117.697 67.1988 119.113 cv
67.1988 119.642 67.0506 120.073 66.8096 120.405 cv
66.3586 120.521 65.9461 120.775 65.6623 121.165 cv
65.4701 121.215 65.271 121.24 65.0719 121.24 cv
.129412 .129412 .129412 rgb
f
65.6623 121.165 mo
65.9461 120.775 66.3586 120.521 66.8096 120.405 cv
66.5258 120.795 66.1132 121.049 65.6623 121.165 cv
0 0 0 rgb
f
88.2344 114.117 mo
86.6633 114.117 li
85.8208 112.658 li
85.9025 112.681 li
86.7866 112.923 li
87.0676 111.898 li
86.1836 111.655 li
85.0644 111.349 li
84.5859 110.52 li
90.3121 110.52 li
88.2344 114.117 li
.0392157 .027451 .027451 rgb
f
86.7866 112.923 mo
85.9025 112.681 li
85.8208 112.658 li
85.0644 111.349 li
86.1836 111.655 li
87.0676 111.898 li
86.7866 112.923 li
.0235294 0 0 rgb
f
87.4488 115.477 mo
86.6633 114.117 li
88.2344 114.117 li
87.4488 115.477 li
.0235294 .0156863 .0156863 rgb
f
175.043 147.982 mo
174.744 147.982 174.445 147.926 174.169 147.813 cv
175.755 145.065 li
176.09 145.541 176.613 145.819 177.168 145.899 cv
177.146 147.288 176.094 147.982 175.043 147.982 cv
.729412 .729412 .729412 rgb
f
177.168 145.899 mo
176.613 145.819 176.09 145.541 175.755 145.065 cv
175.918 144.783 li
176.916 144.783 li
177.075 145.078 177.168 145.435 177.168 145.855 cv
177.168 145.87 177.168 145.885 177.168 145.899 cv
176.605 144.357 mo
176.164 144.357 li
176.308 144.107 li
176.415 144.18 176.514 144.263 176.605 144.357 cv
.168627 .168627 .168627 rgb
f
176.916 144.783 mo
175.918 144.783 li
176.164 144.357 li
176.605 144.357 li
176.725 144.481 176.83 144.623 176.916 144.783 cv
.152941 .152941 .152941 rgb
f
174.169 147.813 mo
173.466 147.527 172.918 146.874 172.918 145.855 cv
172.918 145.435 173.011 145.078 173.17 144.783 cv
175.591 144.783 li
175.639 144.883 175.694 144.978 175.755 145.065 cv
174.169 147.813 li
175.444 144.357 mo
173.481 144.357 li
173.888 143.938 174.465 143.729 175.043 143.729 cv
175.157 143.729 175.271 143.737 175.383 143.753 cv
175.383 143.768 175.383 143.782 175.383 143.797 cv
175.383 143.998 175.404 144.185 175.444 144.357 cv
.423529 .423529 .423529 rgb
f
175.591 144.783 mo
173.17 144.783 li
173.256 144.623 173.361 144.481 173.481 144.357 cv
175.444 144.357 li
175.479 144.51 175.529 144.652 175.591 144.783 cv
.380392 .380392 .380392 rgb
f
175.755 145.065 mo
175.694 144.978 175.639 144.883 175.591 144.783 cv
175.918 144.783 li
175.755 145.065 li
176.164 144.357 mo
175.444 144.357 li
175.404 144.185 175.383 143.998 175.383 143.797 cv
175.383 143.782 175.383 143.768 175.383 143.753 cv
175.714 143.801 176.033 143.919 176.308 144.107 cv
176.164 144.357 li
.0980392 .0980392 .0980392 rgb
f
175.918 144.783 mo
175.591 144.783 li
175.529 144.652 175.479 144.51 175.444 144.357 cv
176.164 144.357 li
175.918 144.783 li
.0901961 .0901961 .0901961 rgb
f
181.824 80.914 mo
176.098 80.914 li
176.336 80.5016 li
181.586 80.5016 li
181.824 80.914 li
181.341 80.0764 mo
176.581 80.0764 li
178.961 75.953 li
181.341 80.0764 li
.529412 .529412 .529412 rgb
f
181.586 80.5016 mo
176.336 80.5016 li
176.581 80.0764 li
181.341 80.0764 li
181.586 80.5016 li
.47451 .47451 .47451 rgb
f
245.949 134.611 mo
244.886 134.611 243.824 133.902 243.824 132.484 cv
243.824 131.066 244.886 130.357 245.949 130.357 cv
247.012 130.357 248.074 131.066 248.074 132.484 cv
248.074 133.902 247.012 134.611 245.949 134.611 cv
.678431 .47451 .47451 rgb
f
196.879 91.199 mo
191.152 91.199 li
194.016 86.238 li
196.879 91.199 li
.721569 .721569 .721569 rgb
f
210.299 149.309 mo
207.876 149.309 li
209.466 146.554 li
209.807 146.647 li
210.088 145.622 li
209.653 145.503 li
210.32 144.348 li
211.923 147.125 li
211.051 147.313 210.297 148.005 210.297 149.199 cv
210.297 149.236 210.298 149.273 210.299 149.309 cv
.517647 .360784 .360784 rgb
f
209.807 146.647 mo
209.466 146.554 li
209.637 146.258 li
209.218 146.258 li
209.653 145.503 li
210.088 145.622 li
209.807 146.647 li
.309804 0 0 rgb
f
207.876 149.309 mo
207.457 149.309 li
209.218 146.258 li
209.637 146.258 li
209.466 146.554 li
207.876 149.309 li
0 0 0 rgb
f
213.184 149.309 mo
210.299 149.309 li
210.298 149.273 210.297 149.236 210.297 149.199 cv
210.297 148.005 211.051 147.313 211.923 147.125 cv
213.184 149.309 li
f
171.172 140.506 mo
171.415 140.192 171.572 139.783 171.592 139.281 cv
172.837 139.281 li
172.541 140.009 171.879 140.418 171.172 140.506 cv
170.002 137.105 mo
169.827 137.065 169.648 137.045 169.469 137.045 cv
169.369 137.045 169.27 137.051 169.171 137.064 cv
169.491 136.648 169.961 136.396 170.462 136.307 cv
170.002 137.105 li
.713725 .498039 .498039 rgb
f
172.837 139.281 mo
171.592 139.281 li
171.593 139.245 171.594 139.209 171.594 139.172 cv
171.594 137.993 170.86 137.304 170.002 137.105 cv
170.462 136.307 li
170.598 136.283 170.737 136.271 170.875 136.271 cv
171.167 136.271 171.459 136.325 171.729 136.432 cv
172.991 138.619 li
172.971 138.863 172.918 139.084 172.837 139.281 cv
.317647 .219608 .219608 rgb
f
170.875 140.525 mo
170.062 140.525 169.25 140.11 168.913 139.281 cv
171.592 139.281 li
171.572 139.783 171.415 140.192 171.172 140.506 cv
171.073 140.519 170.974 140.525 170.875 140.525 cv
168.849 139.102 mo
168.785 138.891 168.75 138.656 168.75 138.398 cv
168.75 137.846 168.911 137.401 169.171 137.064 cv
169.27 137.051 169.369 137.045 169.469 137.045 cv
169.648 137.045 169.827 137.065 170.002 137.105 cv
168.849 139.102 li
.45098 .313725 .313725 rgb
f
171.592 139.281 mo
168.913 139.281 li
168.889 139.223 168.868 139.164 168.849 139.102 cv
170.002 137.105 li
170.86 137.304 171.594 137.993 171.594 139.172 cv
171.594 139.209 171.593 139.245 171.592 139.281 cv
.2 .141176 .141176 rgb
f
172.991 138.619 mo
171.729 136.432 li
172.441 136.714 173 137.37 173 138.398 cv
173 138.473 172.997 138.547 172.991 138.619 cv
.188235 .133333 .133333 rgb
f
219.721 116.611 mo
218.657 116.611 217.594 115.902 217.594 114.484 cv
217.594 113.068 218.657 112.36 219.721 112.36 cv
220.785 112.36 221.848 113.068 221.848 114.484 cv
221.848 115.902 220.785 116.611 219.721 116.611 cv
.333333 .231373 .231373 rgb
f
236.27 209.436 mo
235.826 209.436 235.382 209.312 235.016 209.065 cv
237.524 209.065 li
237.158 209.312 236.714 209.436 236.27 209.436 cv
237.977 208.639 mo
234.563 208.639 li
234.305 208.303 234.145 207.859 234.145 207.309 cv
234.145 205.891 235.208 205.182 236.27 205.182 cv
237.333 205.182 238.395 205.891 238.395 207.309 cv
238.395 207.859 238.235 208.303 237.977 208.639 cv
.690196 .690196 .690196 rgb
f
237.524 209.065 mo
235.016 209.065 li
234.845 208.95 234.692 208.808 234.563 208.639 cv
237.977 208.639 li
237.848 208.808 237.695 208.95 237.524 209.065 cv
.619608 .619608 .619608 rgb
f
202.026 102.977 mo
201.512 102.922 li
198.746 102.621 li
197.808 102.519 li
199.785 99.0939 li
202.026 102.977 li
.384314 .384314 .384314 rgb
f
202.648 104.055 mo
196.922 104.055 li
197.808 102.519 li
198.746 102.621 li
201.512 102.922 li
202.026 102.977 li
202.648 104.055 li
.384314 .266667 .266667 rgb
f
202.111 165.232 mo
201.121 164.996 li
199.297 164.556 li
198.972 164.385 198.602 164.299 198.232 164.299 cv
198.231 164.299 198.231 164.299 198.23 164.299 cv
198.027 164.25 li
198.015 164.247 li
198.073 162.911 199.106 162.243 200.139 162.243 cv
201.202 162.243 202.266 162.951 202.266 164.367 cv
202.266 164.693 202.21 164.981 202.111 165.232 cv
.588235 .588235 .588235 rgb
f
200.358 166.484 mo
200.359 166.465 200.359 166.445 200.359 166.426 cv
200.359 165.501 199.906 164.878 199.297 164.556 cv
201.121 164.996 li
202.111 165.232 li
201.807 165.998 201.101 166.415 200.358 166.484 cv
198.013 164.309 mo
198.013 164.288 198.014 164.268 198.015 164.247 cv
198.027 164.25 li
198.23 164.299 li
198.158 164.299 198.085 164.302 198.013 164.309 cv
.588235 .411765 .411765 rgb
f
200.139 166.494 mo
199.075 166.494 198.012 165.785 198.012 164.367 cv
198.012 164.348 198.012 164.328 198.013 164.309 cv
198.085 164.302 198.158 164.299 198.23 164.299 cv
198.231 164.299 198.231 164.299 198.232 164.299 cv
198.602 164.299 198.972 164.385 199.297 164.556 cv
199.906 164.878 200.359 165.501 200.359 166.426 cv
200.359 166.445 200.359 166.465 200.358 166.484 cv
200.286 166.491 200.212 166.494 200.139 166.494 cv
0 0 0 rgb
f
172.266 129.884 mo
169.512 129.223 li
168.163 128.897 li
169.93 125.836 li
172.266 129.884 li
.580392 .580392 .580392 rgb
f
172.793 130.797 mo
167.066 130.797 li
168.163 128.897 li
169.512 129.223 li
172.266 129.884 li
172.793 130.797 li
.580392 .403922 .403922 rgb
f
231.548 172.173 mo
228.984 171.578 li
227.733 171.284 li
228.14 170.742 228.797 170.471 229.455 170.471 cv
230.406 170.471 231.358 171.038 231.548 172.173 cv
.513725 .513725 .513725 rgb
f
229.455 174.722 mo
228.392 174.722 227.328 174.014 227.328 172.598 cv
227.328 172.057 227.483 171.619 227.733 171.284 cv
228.984 171.578 li
231.548 172.173 li
231.57 172.307 231.582 172.448 231.582 172.598 cv
231.582 174.014 230.519 174.722 229.455 174.722 cv
.513725 .356863 .356863 rgb
f
244.029 180.894 mo
242.965 180.894 241.902 180.186 241.902 178.77 cv
241.902 177.352 242.965 176.643 244.029 176.643 cv
245.092 176.643 246.156 177.352 246.156 178.77 cv
246.156 180.186 245.092 180.894 244.029 180.894 cv
.65098 .454902 .454902 rgb
f
243.525 192.722 mo
242.461 192.722 241.398 192.014 241.398 190.598 cv
241.398 189.512 242.022 188.842 242.792 188.588 cv
242.764 188.734 242.75 188.89 242.75 189.055 cv
242.75 190.471 243.813 191.179 244.875 191.179 cv
245.125 191.179 245.375 191.14 245.611 191.062 cv
245.406 192.169 244.465 192.722 243.525 192.722 cv
.639216 .447059 .447059 rgb
f
244.875 191.179 mo
243.813 191.179 242.75 190.471 242.75 189.055 cv
242.75 188.89 242.764 188.734 242.792 188.588 cv
243.027 188.51 243.276 188.471 243.525 188.471 cv
244.589 188.471 245.652 189.18 245.652 190.598 cv
245.652 190.762 245.638 190.917 245.611 191.062 cv
245.375 191.14 245.125 191.179 244.875 191.179 cv
.443137 .309804 .309804 rgb
f
gsave
43.277 254.719 mo
315.781 254.719 li
315.781 1.99205 li
43.277 1.99205 li
43.277 254.719 li
clp
1.06299 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
43.277 253.723 mo
314.781 253.723 li
314.781 1.99594 li
43.277 1.99594 li
cp
.498047 .498047 .498047 rgb
@
grestore
0 0 0 rgb
%ADOBeginSubsetFont: ADIRMX+TeXGyreHeros-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ADIRMX+TeXGyreHeros-Regular def/FontInfo 6 dict dup begin/Notice (Copyright 2006, 2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX users groups). This work is released under the GUST Font License --  see http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt for details.) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 53 /five putdup 55 /seven putdef/FontBBox {0 -218 825 747} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-23 -0 524 544 686 709 729 749] def/BlueScale 0.0396299 def/BlueFuzz 0 def/StdHW [68] def/StdVW [93] def/StemSnapH [67 68 70 72 73 77 78 82 102 104 133 224] def/StemSnapV [45 62 78 82 83 87 88 90 91 93 100 104] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/zero <1C60D8A8C9B7EF32A0B922DA624C8BC903DCBA935EABD072ABD3E16E714C8F6D34C5FBA11499B1E893EA44567FBAD9B4DCC08348EA6CACAC41BB25CB471372FCF2B4EE5F8D98CED6CB3403F837635BDFEAC1884AEE86103DC3> |-/one <1C60D8A8C9B7EF327C10274B75BC5362A9B599E15B44DE6E8A256B02EF02A7AC332E85FD46A28D5E3D08136D309A> |-/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C816D90737740D50F5475E3D4AB8127D4D32E50E3D091073DB0AA9A972B452C2A0D7E299662084E84F6CCA4731CBC9CD8027D1391B856BF09C2962DA1C7F383C8E67F7788DFCC7F8CFABDAAF1701A91EE0923> |-/five <1C60D8A8C9B7EF32A0B41A5392A2F0CE68C9E2FBEFBA20D105FAA05114D0C29AC16F1B0B7CD0DB9B7F587646599457BED21E89CA420B44EA257B4A9470CE741CBEFFD3EAFA669422C192ED60E02FBBBFC8CBC803905D3B6B3CBEC79A1832BC93EA61DDE77A952F82> |-/seven <1C60D8A8C9B7EF327C10274AADBB0F1624EE349040E4DE86F0E6DE9171661055BD55F10852979A33AB08796911E52734EEBD8B8480E77B43> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EYJGQC+TeXGyreHeros-Regular /ADIRMX+TeXGyreHeros-Regular findfont ct_VMDictPut/EYJGQC+TeXGyreHeros-Regular*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]EYJGQC+TeXGyreHeros-Regular nfEYJGQC+TeXGyreHeros-Regular*1 [9.59863 0 0 -9.59863 0 0 ]msf25.1914 211.871 mo(25)[5.33684 0 ]xsh25.1914 147.59 mo(50)[5.33684 0 ]xsh25.1914 83.3085 mo(75)[5.33684 0 ]xsh19.1914 19.0272 mo(100)sh1.06299 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
39.027 208.852 mo
43.277 208.852 li
@
39.027 144.57 mo
43.277 144.57 li
@
39.027 80.289 mo
43.277 80.289 li
@
39.027 16.008 mo
43.277 16.008 li
@
56.5941 257.973 mo
56.5941 253.723 li
@
144.863 257.973 mo
144.863 253.723 li
@
233.137 257.973 mo
233.137 253.723 li
@
%ADOBeginSubsetFont: ADIRMX+TeXGyreHeros-Regular AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginEYJGQC+TeXGyreHeros-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C36D1DA856C333793E693192FAD4DC89CA0E398605D8BE5CF4EDC035FB0446B487ECA7198AD387ED3B683A2FAFBD4D09EAA6D6AB791C0362CE2E9BA9F> |-/parenright <1C60D8A8C9B81F2C36D1DA856C333793C5F0EC42AAB71A39A0FA5DF17F68B63752B1050E646BFC912548B6BBA0E47D907BB14FADFEDA752B7C7CF808ABF4810878E103991EDDE7> |-/C <1C60D8A8C9B6079FEC2C304BA7C4DF99A087EBD23C2E7B75125055A5C60019564AD3307F3AF4433C6D8E232B47B7E9F74465F955610B2357A21574467890A6CCAC5A284017EA533830231D526DC6BB19E933EFCB5305908640DF20AA0F6E701131F74D> |-/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7BD0FC10E4313198F599B07088D3C9BEDAE8CDC43465549666405512475E5A248021AD9> |-/I <1C60D8A8C9B854D0A3953AFD5975F49691F93DD89A7D01B2A57C4F469FF86F> |-/L <1C60D8A8C9B7EF32574D0487E6547880F4B6043B361FBA3DB3CB43E12DC1A7BBE4E7F29F> |-/a <1C60D8A8C9B7EF32A0B922DB556CBC0C1BE4EB4019C11162E3E0BE9A53064B28423DFD9F7446D940F6B7F72841B055A7FCCEE25B10052043F1A4FCA1DF3D2DD0F6710FC22EDECF8CEB74A5C56B2D57888688FEC6786FDE508695CF1CE7EA213C5EC51C8378FF42CB3C24E1E7C0AB63D5E4B5EF9121DA3EA26D80DCCAFFDEE15E4A9C52CBFAEA62E2768DAD11C8D8C714A0090CAC646835D4D20D> |-/c <1C60D8A8C9B7A73D3292376340BFF8FE9129D66771973B35ADBA6C729FA1AD916BEB6978BF4F4CB94F72627E2AAEC5DB5FC9D15A914FD38E1CE53016EDCE8C4E79B26433271290004B9761FDD7EE66C8B4ECE3333035028B> |-/d <1C60D8A8C9B7EF32A0B41A53EAA8DD99EF2BD8BDE3A2B2F941BA776210B9CE1DEF980B0BE2AF2C209BF864DDE4FC29622FC64CB5E5F9AEDF31FC74138BCBA3E85A91CD9BA99E3C4B0D4FE70EB96872472FC293A041719A666AFF440C951FE6C61E3F> |-/e <1C60D8A8C9B7EF32A0B5E895C29882E014FD0354A27A0244E62462364B98DCF54BB75709DDD22CD227AEABD6BD9B087581EAB1808974D356F582252DF86976B1970B07D692AE62389CF40F994A3B59C92310F0EE35C06452E8E6737C2E887957054569E9E162D87071E7113832D2C5> |-/g <1C60D8A8C9B7EF32241266D723076DDAD2EE34706C473E8757E405BFCB87E823E0BDC421A0ECA4D8668BE3F357CBB173414C33F1675443FAA5D0DED07DC4238B598DEDE05B511E3B5EEC0EB91938E4E2AD71F303C17C2B65F62391E12896CA743806226D9A94718679CF9C6E836EFB158BAB813A7D449237DC66E4E0068E7EE10F70DC7AC2E596FFCAC7AC> |-/i <1C60D8A8C9B88C082599D5E969003D3E87A2FA14CCA95CB287908C061C5C08365D0869E5FCD7A3692CA34E446266F340A9EC88> |-/k <1C60D8A8C9B7A73DEE9439F9B5CA2496814D68B0B4CB5CC5FF13171FB7D9EC8722E9D9A6DB93DDE78D1492B47DB939B4C7DEDBF35EAF3212FB5D71D2CD152DD704> |-/l <1C60D8A8C9B88C082599D5E8978361AC3E4CE37A91FD219E1E35EBCB8689E5> |-/m <1C60D8A8C9B6B41C9ED1F843C0AC3EFE8F861096F0628130DAFD1E0FE7042677D89F07735595E5C3119A175FC12C1FB5BEE8792F3F1A8521EA0B6DFE62BC282DC88AB01A63EC8ACD3B48450EC7BFE48A0F14527B32BCAB1183232A1CB98D24B9B62A5E7CA3366B9A55DB648C936AEB83FC70E0F4ECE1> |-/n <1C60D8A8C9B7EF3224163D31C0DB1D598DAED662F9685E7C780470C0D66AB2703357A0932E77B96E6C1CBBB8C0BD5C8BEAC84E00DB431F2179B4C415F91769D3CBB46333147AC5D2E749624FB9> |-/o <1C60D8A8C9B7EF32A0B5E89A2A13C75C70E141538278492B6CAA2FF79466AD5C84D814276B4E131C0EAD823760CF3FBA1236282DC2D61070BBC6855783AD83D643D46927A7DD95B98870CDDD067E6C5394E0DF9B70> |-/r <1C60D8A8C9B81F2C6DADD030667DEDACD5CB771A01ADBC778D67F666B86859C3D6C40693C25A0A56445924393B63D0EB29E8AC9A087E1D6F9ED9339EB207> |-/t <1C60D8A8C9B854D0879B2EAACC27DADBB206DA486349D2D3FD58D11F24B6E4BFF98DFF4FB65A0A26997EA685E724963C6E40D1D44088A81310452229867765F21A9799A0C90AA207AB25E14C1A2ED1> |-/u <1C60D8A8C9B7EF32A0B922DB979B7310CCAC2EB60FBCA1F1DB98AB3536FA4A18C53C7BAA502D14B36BAB491C8B1807D044FBAB260EFF3683D4C093B4A61ECEAFD7BEFC> |-/v <1C60D8A8C9B7A73DEE9439F9B5CA2497C059F27CB3EFE39B63F0526EBA958DE17522910AEFA4095FA9FF22> |-systemdict /gcheck known {setglobal} if end {end} ifendEYJGQC+TeXGyreHeros-Regular /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 67 /C putdup 69 /E putdup 73 /I putdup 76 /L putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 103 /g putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 116 /t putdup 117 /u putdup 118 /v putpop%ADOEndSubsetFont
/EYJGQC+TeXGyreHeros-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 11{/.notdef}rp /C /.notdef /E 3{/.notdef}rp /I 2{/.notdef}rp /L 20{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /.notdef /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]EYJGQC+TeXGyreHeros-Regular nfEYJGQC+TeXGyreHeros-Regular*1 [9.59863 0 0 -9.59863 0 0 ]msf53.5938 267.828 mo(012)[88.2691 88.2738 0 ]xshEYJGQC+TeXGyreHeros-Regular*1 [12 0 0 -12 0 0 ]msf140.531 282.182 mo(Ele)sh157.692 282.182 mo(vation \(km\))[5.76016 6.672 3.336 2.664 6.672 6.672 3.336 3.99591 6 9.99591 0 ]xshEYJGQC+TeXGyreHeros-Regular*1 [0 -12 -12 0 0 0 ]msf15.3703 189.855 mo(Lung Cancer Incidence)[-6.61211 -6.672 -6.672 -6.672 -3.336 -8.664 -6.672 -6.672 -6 -6.672 -3.99591 -3.336 -3.336 -6.672 -6 -2.664 -6.672 -6.672 -6.672 -6 0 ]yshgsave
246.068 84.47 mo
304.959 84.47 li
304.959 11.814 li
246.068 11.814 li
246.068 84.47 li
clp
246.281 84.257 mo
304.746 84.257 li
304.746 12.0269 li
246.281 12.0269 li
cp
1 1 1 rgb
f
.425197 lw
1 lc
246.281 84.2569 mo
304.746 84.2569 li
304.746 12.0268 li
246.281 12.0268 li
cp
.800781 .800781 .800781 rgb
@
grestore
0 0 0 rgb
%ADOBeginSubsetFont: ADIRMX+TeXGyreHeros-Regular AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginEYJGQC+TeXGyreHeros-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B64EDFA3F30AE4A167E34349F6122F59B4D365B1632827D0993192DAFA20AB20460E06495D1DD63838015BF562B4911F1BFD171557C2D7153C7C35B857752D5E5E5622E3F57A27D3021584C92ECE0A> |-/S <1C60D8A8C9B64EDFFA9DF552E7DB48290E4D70A990233835180DB03750CF367CF722C6EF0863FDC6C47725242343D36955C6ACCB839633DE3A5DB912EA27E47A63AE7468EE66D5F5E910D009A97CA72C5D7B82A828AA230289F31DE377E01E9F7094EC7AF4216344EE624FF586115BC1DBCD8177DC0FDBA1AFEFECA22912D5439679> |-systemdict /gcheck known {setglobal} if end {end} ifendEYJGQC+TeXGyreHeros-Regular /Encoding getdup 80 /P putdup 83 /S putpop%ADOEndSubsetFont
/EYJGQC+TeXGyreHeros-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 11{/.notdef}rp /C /.notdef /E 3{/.notdef}rp /I 2{/.notdef}rp /L 3{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /.notdef /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]EYJGQC+TeXGyreHeros-Regular nfEYJGQC+TeXGyreHeros-Regular*1 [9.59863 0 0 -9.59863 0 0 ]msf256.516 23.297 mo(Smoking)sh251.516 33.6681 mo(Prevalence)[6.40234 3.1004 5.1832 4.60739 5.33685 2.13089 5.33685 5.33682 4.79932 0 ]xsh250.535 52.649 mo
279.336 52.649 li
279.336 38.9693 li
250.535 38.9693 li
cp
1 1 1 rgb
f
253.414 45.809 mo
276.453 45.809 li
.599609 0 0 rgb
@
264.934 42.5 mo
267.797 47.461 li
262.07 47.461 li
cp
0 0 0 rgb
f
250.535 66.328 mo
279.336 66.328 li
279.336 52.6479 li
250.535 52.6479 li
cp
1 1 1 rgb
f
[4.25197 4.25197 ] 0 dsh
253.414 59.488 mo
276.453 59.488 li
.599609 0 0 rgb
@
267.062 59.488 mo
267.062 62.32 262.809 62.32 262.809 59.488 cv
262.809 56.652 267.062 56.652 267.062 59.488 cv
0 0 0 rgb
f
250.535 80.008 mo
279.336 80.008 li
279.336 66.3283 li
250.535 66.3283 li
cp
1 1 1 rgb
f
[1.06299 3.18898 ] 0 dsh
253.414 73.168 mo
276.453 73.168 li
.599609 0 0 rgb
@
264.934 76.473 mo
267.797 71.516 li
262.07 71.516 li
cp
0 0 0 rgb
f
%ADOBeginSubsetFont: ADIRMX+TeXGyreHeros-Regular AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginEYJGQC+TeXGyreHeros-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/h <1C60D8A8C9B7EF327C10274A38D5724A19047DB1B20B5C9BABD9C491D215168A9695D8441ED51383B9E3FA2645AA73470F79361B65CED3281A53DC78C9466F19B67787BE054FD933> |-/w <1C60D8A8C9B6079F3517E075602D4BAA6931F2D8CBE87F9F4BD95E6EB0F280B0DE8F4B32B83D6278110C0DD3E7D9E1A29CD3C50F8E48301251FA5EA4EA> |-systemdict /gcheck known {setglobal} if end {end} ifendEYJGQC+TeXGyreHeros-Regular /Encoding getdup 104 /h putdup 119 /w putpop%ADOEndSubsetFont
/EYJGQC+TeXGyreHeros-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /.notdef /seven 11{/.notdef}rp /C /.notdef /E 3{/.notdef}rp /I 2{/.notdef}rp /L 3{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /.notdef /t /u /v /w 136{/.notdef}rp]EYJGQC+TeXGyreHeros-Regular nfEYJGQC+TeXGyreHeros-Regular*1 [9.59863 0 0 -9.59863 0 0 ]msf281.496 48.828 mo(high)sh281.496 62.5077 mo(mid)sh281.496 76.1874 mo(low)[2.13089 5.241 0 ]xshgsave
316.773 288 mo
491 288 li
491 0 li
316.773 0 li
316.773 288 li
clp
316.773 288 mo
491 288 li
491 0 li
316.773 0 li
cp
1 1 1 rgb
f
1 lc
316.773 288 mo
491 288 li
491 -6.10352e-05 li
316.773 -6.10352e-05 li
cp
@
grestore
372.32 251.269 mo
489.004 251.269 li
489.004 1.9921 li
372.32 1.9921 li
cp
1 1 1 rgb
f
gsave
382 252 mo
384 252 li
384 1.99205 li
382 1.99205 li
382 252 li
clp
[] 0 dsh
382.562 251.27 mo
382.562 1.99191 li
.980469 .980469 .980469 rgb
@
grestore
gsave
415 252 mo
417 252 li
417 1.99205 li
415 1.99205 li
415 252 li
clp
[] 0 dsh
416.297 251.27 mo
416.297 1.99191 li
.980469 .980469 .980469 rgb
@
grestore
gsave
449 252 mo
451 252 li
451 1.99205 li
449 1.99205 li
449 252 li
clp
[] 0 dsh
450.027 251.27 mo
450.027 1.99191 li
.980469 .980469 .980469 rgb
@
grestore
gsave
483 252 mo
485 252 li
485 1.99205 li
483 1.99205 li
483 252 li
clp
[] 0 dsh
483.762 251.27 mo
483.762 1.99191 li
.980469 .980469 .980469 rgb
@
grestore
gsave
372.32 240 mo
490 240 li
490 238 li
372.32 238 li
372.32 240 li
clp
.425197 lw
[] 0 dsh
372.32 239.012 mo
489.008 239.012 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 219 mo
490 219 li
490 218 li
372.32 218 li
372.32 219 li
clp
.425197 lw
[] 0 dsh
372.32 218.578 mo
489.008 218.578 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 199 mo
490 199 li
490 197 li
372.32 197 li
372.32 199 li
clp
.425197 lw
[] 0 dsh
372.32 198.145 mo
489.008 198.145 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 178 mo
490 178 li
490 177 li
372.32 177 li
372.32 178 li
clp
.425197 lw
[] 0 dsh
372.32 177.715 mo
489.008 177.715 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 158 mo
490 158 li
490 157 li
372.32 157 li
372.32 158 li
clp
.425197 lw
[] 0 dsh
372.32 157.281 mo
489.008 157.281 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 138 mo
490 138 li
490 136 li
372.32 136 li
372.32 138 li
clp
.425197 lw
[] 0 dsh
372.32 136.848 mo
489.008 136.848 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 117 mo
490 117 li
490 116 li
372.32 116 li
372.32 117 li
clp
.425197 lw
[] 0 dsh
372.32 116.414 mo
489.008 116.414 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 97 mo
490 97 li
490 95 li
372.32 95 li
372.32 97 li
clp
.425197 lw
[] 0 dsh
372.32 95.9839 mo
489.008 95.9839 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 76 mo
490 76 li
490 74.9999 li
372.32 74.9999 li
372.32 76 li
clp
.425197 lw
[] 0 dsh
372.32 75.551 mo
489.008 75.551 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 56 mo
490 56 li
490 54 li
372.32 54 li
372.32 56 li
clp
.425197 lw
[] 0 dsh
372.32 55.117 mo
489.008 55.117 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 35 mo
490 35 li
490 34 li
372.32 34 li
372.32 35 li
clp
.425197 lw
[] 0 dsh
372.32 34.684 mo
489.008 34.684 li
.898438 .898438 .898438 rgb
@
grestore
gsave
372.32 15 mo
490 15 li
490 14 li
372.32 14 li
372.32 15 li
clp
.425197 lw
[] 0 dsh
372.32 14.2539 mo
489.008 14.2539 li
.898438 .898438 .898438 rgb
@
grestore
gsave
399 252 mo
400 252 li
400 1.99205 li
399 1.99205 li
399 252 li
clp
.425197 lw
[] 0 dsh
399.43 251.27 mo
399.43 1.99191 li
.898438 .898438 .898438 rgb
@
grestore
gsave
432 252 mo
434 252 li
434 1.99205 li
432 1.99205 li
432 252 li
clp
.425197 lw
[] 0 dsh
433.16 251.27 mo
433.16 1.99191 li
.898438 .898438 .898438 rgb
@
grestore
gsave
466 252 mo
468 252 li
468 1.99205 li
466 1.99205 li
466 252 li
clp
.425197 lw
[] 0 dsh
466.895 251.27 mo
466.895 1.99191 li
.898438 .898438 .898438 rgb
@
1.06299 lw
[4.25197 4.25197 ] 0 dsh
466.895 251.27 mo
466.895 1.99191 li
.662109 .662109 .662109 rgb
@
grestore
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
.697266 .697266 1 rgb
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
451.219 251.269 mo
458.164 251.269 li
458.164 1.9921 li
451.219 1.9921 li
cp
f
.850394 lw
1 ml
[] 0 dsh
460.168 138.891 mo
460.168 134.805 li
.266602 .266602 .266602 rgb
@
460.168 136.848 mo
421.645 136.848 li
@
421.645 138.891 mo
421.645 134.805 li
@
476.613 36.727 mo
476.613 32.641 li
@
476.613 34.684 mo
443.836 34.684 li
@
443.836 36.727 mo
443.836 32.641 li
@
458.172 98.027 mo
458.172 93.938 li
@
458.172 95.984 mo
433.707 95.984 li
@
433.707 98.027 mo
433.707 93.938 li
@
461.695 159.324 mo
461.695 155.238 li
@
461.695 157.281 mo
411.125 157.281 li
@
411.125 159.324 mo
411.125 155.238 li
@
473.25 179.758 mo
473.25 175.672 li
@
473.25 177.715 mo
393.957 177.715 li
@
393.957 179.758 mo
393.957 175.672 li
@
433.754 220.621 mo
433.754 216.535 li
@
433.754 218.578 mo
401.543 218.578 li
@
401.543 220.621 mo
401.543 216.535 li
@
483.199 77.594 mo
483.199 73.508 li
@
483.199 75.551 mo
421.453 75.551 li
@
421.453 77.594 mo
421.453 73.508 li
@
465.996 57.16 mo
465.996 53.074 li
@
465.996 55.117 mo
444.758 55.117 li
@
444.758 57.16 mo
444.758 53.074 li
@
483.703 16.297 mo
483.703 12.207 li
@
483.703 14.254 mo
455.34 14.254 li
@
455.34 16.297 mo
455.34 12.207 li
@
469.957 118.457 mo
469.957 114.371 li
@
469.957 116.414 mo
418.273 116.414 li
@
418.273 118.457 mo
418.273 114.371 li
@
469.324 200.188 mo
469.324 196.102 li
@
469.324 198.145 mo
377.625 198.145 li
@
377.625 200.188 mo
377.625 196.102 li
@
455.125 241.055 mo
455.125 236.969 li
0 0 0 rgb
@
455.125 239.012 mo
442.293 239.012 li
@
442.293 241.055 mo
442.293 236.969 li
@
gsave
438.406 139.348 mo
443.41 139.348 li
443.41 134.348 li
438.406 134.348 li
438.406 139.348 li
clp
443.035 136.848 mo
443.035 139.684 438.781 139.684 438.781 136.848 cv
438.781 134.012 443.035 134.012 443.035 136.848 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
443.035 136.848 mo
443.035 139.684 438.781 139.684 438.781 136.848 cv
438.781 134.012 443.035 134.012 443.035 136.848 cv
@
grestore
gsave
457.723 37.184 mo
462.727 37.184 li
462.727 32.187 li
457.723 32.187 li
457.723 37.184 li
clp
462.352 34.684 mo
462.352 37.52 458.098 37.52 458.098 34.684 cv
458.098 31.852 462.352 31.852 462.352 34.684 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
462.352 34.684 mo
462.352 37.5199 458.098 37.5199 458.098 34.684 cv
458.098 31.8519 462.352 31.8519 462.352 34.684 cv
@
grestore
gsave
443.437 98.482 mo
448.441 98.482 li
448.441 93.484 li
443.437 93.484 li
443.437 98.482 li
clp
448.066 95.984 mo
448.066 98.816 443.812 98.816 443.812 95.984 cv
443.812 93.148 448.066 93.148 448.066 95.984 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
448.066 95.9839 mo
448.066 98.816 443.812 98.816 443.812 95.9839 cv
443.812 93.1479 448.066 93.1479 448.066 95.9839 cv
@
grestore
gsave
433.906 159.781 mo
438.91 159.781 li
438.91 154.78 li
433.906 154.78 li
433.906 159.781 li
clp
438.535 157.281 mo
438.535 160.117 434.281 160.117 434.281 157.281 cv
434.281 154.445 438.535 154.445 438.535 157.281 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
438.535 157.281 mo
438.535 160.117 434.281 160.117 434.281 157.281 cv
434.281 154.445 438.535 154.445 438.535 157.281 cv
@
grestore
gsave
431.102 180.212 mo
436.105 180.212 li
436.105 175.214 li
431.102 175.214 li
431.102 180.212 li
clp
435.73 177.715 mo
435.73 180.547 431.477 180.547 431.477 177.715 cv
431.477 174.879 435.73 174.879 435.73 177.715 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
435.73 177.715 mo
435.73 180.547 431.477 180.547 431.477 177.715 cv
431.477 174.879 435.73 174.879 435.73 177.715 cv
@
grestore
gsave
449.824 78.048 mo
454.828 78.048 li
454.828 73.051 li
449.824 73.051 li
449.824 78.048 li
clp
454.453 75.551 mo
454.453 78.383 450.199 78.383 450.199 75.551 cv
450.199 72.715 454.453 72.715 454.453 75.551 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
454.453 75.551 mo
454.453 78.383 450.199 78.383 450.199 75.551 cv
450.199 72.7149 454.453 72.7149 454.453 75.551 cv
@
grestore
gsave
415.148 221.078 mo
420.148 221.078 li
420.148 216.078 li
415.148 216.078 li
415.148 221.078 li
clp
419.773 218.578 mo
419.773 221.414 415.523 221.414 415.523 218.578 cv
415.523 215.742 419.773 215.742 419.773 218.578 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
419.773 218.578 mo
419.773 221.414 415.523 221.414 415.523 218.578 cv
415.523 215.742 419.773 215.742 419.773 218.578 cv
@
grestore
gsave
452.879 57.6179 mo
457.879 57.6179 li
457.879 52.616 li
452.879 52.616 li
452.879 57.6179 li
clp
457.504 55.117 mo
457.504 57.953 453.254 57.953 453.254 55.117 cv
453.254 52.281 457.504 52.281 457.504 55.117 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
457.504 55.117 mo
457.504 57.953 453.254 57.953 453.254 55.117 cv
453.254 52.281 457.504 52.281 457.504 55.117 cv
@
grestore
gsave
467.02 16.752 mo
472.023 16.752 li
472.023 11.754 li
467.02 11.754 li
467.02 16.752 li
clp
471.648 14.254 mo
471.648 17.086 467.395 17.086 467.395 14.254 cv
467.395 11.418 471.648 11.418 471.648 14.254 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
471.648 14.2539 mo
471.648 17.0859 467.395 17.0859 467.395 14.2539 cv
467.395 11.4179 471.648 11.4179 471.648 14.2539 cv
@
grestore
gsave
441.617 118.914 mo
446.617 118.914 li
446.617 113.917 li
441.617 113.917 li
441.617 118.914 li
clp
446.242 116.414 mo
446.242 119.25 441.992 119.25 441.992 116.414 cv
441.992 113.582 446.242 113.582 446.242 116.414 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
446.242 116.414 mo
446.242 119.25 441.992 119.25 441.992 116.414 cv
441.992 113.582 446.242 113.582 446.242 116.414 cv
@
grestore
gsave
420.973 200.645 mo
425.977 200.645 li
425.977 195.647 li
420.973 195.647 li
420.973 200.645 li
clp
425.602 198.145 mo
425.602 200.98 421.348 200.98 421.348 198.145 cv
421.348 195.312 425.602 195.312 425.602 198.145 cv
.266602 .266602 .266602 rgb
f
.75 lw
1 lc
425.602 198.145 mo
425.602 200.98 421.348 200.98 421.348 198.145 cv
421.348 195.312 425.602 195.312 425.602 198.145 cv
@
grestore
gsave
446.207 241.512 mo
451.211 241.512 li
451.211 236.512 li
446.207 236.512 li
446.207 241.512 li
clp
450.836 239.012 mo
450.836 241.848 446.582 241.848 446.582 239.012 cv
446.582 236.176 450.836 236.176 450.836 239.012 cv
f
.75 lw
1 lc
450.836 239.012 mo
450.836 241.848 446.582 241.848 446.582 239.012 cv
446.582 236.176 450.836 236.176 450.836 239.012 cv
@
grestore
gsave
372.32 252 mo
490 252 li
490 1.99205 li
372.32 1.99205 li
372.32 252 li
clp
1.06299 lw
1 lc
10 ml
372.32 251.269 mo
489.004 251.269 li
489.004 1.99203 li
372.32 1.99203 li
cp
.498047 .498047 .498047 rgb
@
grestore
%ADOBeginSubsetFont: ADIRMX+TeXGyreHeros-Regular AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginEYJGQC+TeXGyreHeros-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF322BCBC0A600199D8682C6A92D7DC99FBCEA2A683F64E9C811E84BD217BA5CF28AF3E26C35F85137361F113187CE7901396CAAA53B72703E6C8E634C6CE5DF6FE25C587AA5D8B2114837514FD21BFE3220BA26AB2444ABA9659BBB07E5E8C13CB1459B721D9FF55FD656A6B267E6AD896512421BF73A> |-/four <1C60D8A8C9B7EF327C102745686BBF39A1225AE56A66E3E9EF2E33977BF9922756BAFCB8879DB332AD134576231119302C57E096B0A3077ED090DF0DB16583A59030AF60C3> |-/nine <1C60D8A8C9B7EF32A0B41A5C5DF508E095F9FB409790DC2F5E063659DD4FF1D52A58A95D3B4E117420D066D15FDC8E3D9B5039B2204B1534BE61AB52D6A2A7EBCB5F4C90F5519D40C06142E4D4CDACB982EFDD60DECC117FA04174F8961935D57DAD5BC57DB8FEB2BB662FAF203254E5899E8FD60FE4BD5F> |-/A <1C60D8A8C9B64EDFA3F30AE407557A56F7D2632BFFC384CF35BB48BD6D22E8325B09DF572DC6D1C3802D9EF3DF92E0C1CDA64F4BA077807F6CC30E96F0B274> |-/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD436BD0DF6BB230FA446C0FB9A43559C6FF0A697388DEA5EDDC35FCF5A5AC38023D5944C8CB44E14D402881884172F8A0D8282E5F7031F5AEE45734EF69> |-/M <1C60D8A8C9B6B41CEC82591576753B39B044E032E76B2A8108C273939FD48616F3DA19F7AEE32E2316F9E8D64417A61ECD0E670395F78D34C4E6EE8B45AAC6CD7EF887D8C6> |-/N <1C60D8A8C9B6079F3517E0749FFA5B85FFE4812225A97D39105209D10A0CB7075C211A975B7C30435AAE2815A22C513BF744B5C690FDE0> |-/O <1C60D8A8C9B6FF867B53A6DD68F83756E9193BBEE4E31FEFD5656E4565B98AD3BEAD849BF0EC6D0B9FC660E2424027B12C0CD062AFA111FC1CFE015D58E4D2C55E114E36B6A74D69728AE7A03F1F68AE2DD2FB0F07DFD3AFFE8407D9154D9CB3E45220F67F> |-/R <1C60D8A8C9B6079F3517E07A0747C3DF2D0AB1547A3022E756CE9EB416BDDEB137222E79DB80F2F623EE67B90FE852827F20C895BF7EA1C3A5A317C0D362A858A6A67A622490B17171A757576E4CEE0E89125A67584FEDD9630F5C28530FDEE7A9FF8E53781FD03A205B8828F38F143D12> |-/T <1C60D8A8C9B7D8BE41A64DAB7FE70E41DE80DCE2C51C526BCE73D4F863E7AA6719D500B0849209E3557F1C84> |-/U <1C60D8A8C9B6079FEC2C304BE7C3A8BBE6FEC05F562573BFA7C4B743BC25AD0215E15B1CD1F538685BE2F27512393BF2E6FA5CAC8B155B6CBD4E48C45C13E9972C1B44F93069B902> |-/V <1C60D8A8C9B64EDFA3F30AEA52D3BFEF7DD7CF5483A240993145FBAC811DF701D741C840E0D12E72714F1E> |-/W <1C60D8A8C9B5D6EF151AEEAFC0B17C5EE15C2AFD72066A73EBE426747C9AEC609A3F8987F7A6E2749480B7C5E3B8805BF6F8CC9E9919606D274FAF87133F183926E0D9> |-/Y <1C60D8A8C9B64EDFA3F30AEA52D3BFE1A01D729456DC0DADF7895D702D1DE1C938D19ED17261F5442DD111AD3AC28B37CBFC4901FA82A6> |-/Z <1C60D8A8C9B7D8BE6A02C8B7AC4B1E33EB6A7FD15B58118D552CECDEA7DE09363F3473D4D6D9CCCD4CFCFF0F952BC5> |-systemdict /gcheck known {setglobal} if end {end} ifendEYJGQC+TeXGyreHeros-Regular /Encoding getdup 51 /three putdup 52 /four putdup 57 /nine putdup 65 /A putdup 68 /D putdup 77 /M putdup 78 /N putdup 79 /O putdup 82 /R putdup 84 /T putdup 85 /U putdup 86 /V putdup 87 /W putdup 89 /Y putdup 90 /Z putpop%ADOEndSubsetFont
/EYJGQC+TeXGyreHeros-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /D /E 3{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O /P /.notdef /R /S /T /U /V /W /.notdef /Y /Z 6{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /.notdef /t /u /v /w 136{/.notdef}rp]EYJGQC+TeXGyreHeros-Regular nfEYJGQC+TeXGyreHeros-Regular*1 [6.16988 -7.35297 -7.35297 -6.16988 0 0 ]msf353.41 257.806 mo(Meta)[5.13947 -6.12495 3.36255 -4.00731 1.71521 -2.04413 0 0 ]xysh345.051 247.329 mo(NM \(23\))[4.45465 -5.30884 5.13947 -6.12498 1.71524 -2.04411 2.05453 -2.44849 3.43045 -4.08826 3.43045 -4.08824 0 0 ]xysh344.41 227.665 mo(WY \(14\))[5.82437 -6.94121 4.11536 -4.9045 1.71524 -2.04413 2.0545 -2.44847 3.43048 -4.08826 3.43045 -4.08826 0 0 ]xysh345.695 205.7 mo(MT \(15\))[5.13947 -6.12497 3.76974 -4.49261 1.71524 -2.04411 2.05453 -2.44849 3.43045 -4.08826 3.43045 -4.08826 0 0 ]xysh348.266 182.204 mo(ID \(22\))[1.71524 -2.04413 4.45465 -5.30885 1.71521 -2.04411 2.05453 -2.44849 3.43045 -4.08826 3.43045 -4.08826 0 0 ]xysh346.98 163.302 mo(AZ \(11\))[4.11536 -4.9045 3.76974 -4.4926 1.71524 -2.04413 2.05453 -2.44849 3.43045 -4.08826 3.43045 -4.08824 0 0 ]xysh345.051 145.169 mo(WA \(32\))[5.51587 -6.57356 4.11536 -4.90448 1.71524 -2.04413 2.05453 -2.44849 3.43045 -4.08826 3.43045 -4.08824 0 0 ]xysh345.051 124.736 mo(CO \(29\))[4.39288 -5.23523 4.80017 -5.72061 1.71521 -2.04411 2.05453 -2.44849 3.43045 -4.08826 3.43045 -4.08826 0 0 ]xysh349.551 98.9386 mo(NV \(7\))[4.45465 -5.30885 4.11536 -4.90448 1.71524 -2.04413 2.05453 -2.44849 3.43045 -4.08826 0 0 ]xysh345.051 83.8683 mo(OR \(29\))[4.80017 -5.72061 4.45465 -5.30885 1.71524 -2.04413 2.0545 -2.44847 3.43048 -4.08826 3.43045 -4.08826 0 0 ]xysh346.336 61.9074 mo(CA \(54\))[4.26956 -5.08824 4.11536 -4.9045 1.71521 -2.04413 2.05453 -2.44849 3.43045 -4.08824 3.43045 -4.08826 0 0 ]xysh346.336 41.4738 mo(UT \(17\))[4.45465 -5.30885 3.76974 -4.4926 1.71524 -2.04413 2.05453 -2.44849 3.43045 -4.08826 3.43045 -4.08826 0 0 ]xysh1.06299 lw
10 ml
368.07 239.012 mo
372.32 239.012 li
@
368.07 218.578 mo
372.32 218.578 li
@
368.07 198.145 mo
372.32 198.145 li
@
368.07 177.715 mo
372.32 177.715 li
@
368.07 157.281 mo
372.32 157.281 li
@
368.07 136.848 mo
372.32 136.848 li
@
368.07 116.414 mo
372.32 116.414 li
@
368.07 95.984 mo
372.32 95.984 li
@
368.07 75.551 mo
372.32 75.551 li
@
368.07 55.117 mo
372.32 55.117 li
@
368.07 34.684 mo
372.32 34.684 li
@
368.07 14.254 mo
372.32 14.254 li
@
399.43 255.523 mo
399.43 251.27 li
@
433.16 255.523 mo
433.16 251.27 li
@
466.895 255.523 mo
466.895 251.27 li
@
%ADOBeginSubsetFont: ADIRMX+TeXGyreHeros-Regular AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.systemdict beginEYJGQC+TeXGyreHeros-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3A3F8849EC2BB6322AEC34677A7A89AA8D06> |-systemdict /gcheck known {setglobal} if end {end} ifendEYJGQC+TeXGyreHeros-Regular /Encoding getdup 45 /hyphen putpop%ADOEndSubsetFont
/EYJGQC+TeXGyreHeros-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /D /E 3{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O /P /.notdef /R /S /T /U /V /W /.notdef /Y /Z 6{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /.notdef /t /u /v /w 136{/.notdef}rp]EYJGQC+TeXGyreHeros-Regular nfEYJGQC+TeXGyreHeros-Regular*1 [9.59863 0 0 -9.59863 0 0 ]msf392.43 265.379 mo(-40)sh426.16 265.379 mo(-20)sh463.901 265.379 mo(0)sh%ADOBeginSubsetFont: LADAAA+CairoFont-1-1 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LADAAA+CairoFont-1-1 def/FontInfo 6 dict dup begin/Notice (Copyright URW Software, Copyright 1997 by URW) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 1 /beta putdef/FontBBox {0 -222 515 740} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [673 693] def/StdHW [0] def/StdVW [0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/beta <1C60D8A8C9B79676F83E635FF33E508D008B54E2BBB5AC4B7F78E346A0DB5339CBFE2AF26D1F418825ED4F9856E5791634D500EEB2C96EC9267AE81F3B97DAC868B0547DCA941E9E863A55A589AF7D2F2CF9D620BE2E9C8C77186E582D755F2D376F09ED280007998E4DA9C415C9FAC136D3F770E8863EAF8D2B5EB31E5522D8C31F13872819314DEDD9BEACDEB3C7258190D2A0B37AF0AA2579D2ED49262A67F9057A7324A67455732EC65E80EB47F18C56A84B06272B4400D072E991FE4A72B4B3A37063519D02BF1C0365B25814E0E624AC6E07C260F3F2D4EE8B6AB7598624> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EYJGQD+CairoFont-1-1 /LADAAA+CairoFont-1-1 findfont ct_VMDictPut/EYJGQD+CairoFont-1-1*1 [/.notdef /beta 254{/.notdef}rp]EYJGQD+CairoFont-1-1 nfEYJGQD+CairoFont-1-1*1 [12 0 0 -12 0 0 ]msf408.664 278.077 mo(\001)shEYJGQC+TeXGyreHeros-Regular*1 [8.39941 0 0 -8.39941 0 0 ]msf415.664 281.049 mo(elevation)[4.99765 1.99924 5.00586 4.99765 4.99768 3.00699 1.99924 4.99768 0 ]xshEYJGQC+TeXGyreHeros-Regular*1 [0 -12 -12 0 0 0 ]msf332.144 140.633 mo(State)[-7.94423 -3.336 -6.672 -3.15607 0 ]yshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
/EYJGQC+TeXGyreHeros-Regular*1 uf/EYJGQC+TeXGyreHeros-Regular uf/ADIRMX+TeXGyreHeros-Regular uf/EYJGQD+CairoFont-1-1*1 uf/EYJGQD+CairoFont-1-1 uf/LADAAA+CairoFont-1-1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
